CREATE SEQUENCE REPORTSEQ;

CREATE TABLE REPORTS (
	ID VARCHAR2(10) NOT NULL,
	ROWSTAMP VARCHAR2(10) NOT NULL,
	REPORTNAME VARCHAR2(200),
	DESCRIPTION VARCHAR2(2000),
	HELPTEXT VARCHAR2(200),
	CAMPUSID VARCHAR2(10),
	ISALLCAMPUS NUMBER(1) DEFAULT 0 NOT NULL,
	ISACTIVE NUMBER(1) DEFAULT 1 NOT NULL,
	FILENAME VARCHAR2(300),
	REQUESTED TIMESTAMP,
	REQUESTEDBY VARCHAR2(10), /* USERID */
	REQUESTERBUSINESSUNIT VARCHAR2(10),
	REQUESTERBUSINESSUNITNAME VARCHAR2(30),
	REQUESTERSUPERDIVISION VARCHAR2(10),
	REQUESTERSUPERDIVISIONNAME VARCHAR2(30),
	REQUESTERDIVISION VARCHAR2(10),
	REQUESTERDIVISIONNAME VARCHAR2(100),
	REQUESTERDEPARTMENT VARCHAR2(10),
	REQUESTERDEPARTMENTNAME VARCHAR2(100),
	REQUESTERSUBDEPARTMENT VARCHAR2(10),
	REQUESTERSUBDEPARTMENTNAME VARCHAR2(100),
	REQUESTERDEPTID VARCHAR2(10),
	REQUESTERDEPTIDNAME VARCHAR2(30),
	REASON	VARCHAR2(4000),
	REGISTERED TIMESTAMP, 
	REGISTEREDBY VARCHAR2(10), /* USERID */
	CATEGORY VARCHAR2(500),
	TOOL VARCHAR2(50),
	TOOLVERSION VARCHAR2(50),
	RUNTIMEENVIRONMENT VARCHAR2(200),
	PROGRAMVERSION VARCHAR2(30),
	STATUS VARCHAR2(50),
	STATUSED TIMESTAMP,
	STATUSEDBY VARCHAR2(10),
	ISSLOWRUNNING NUMBER(1) DEFAULT 0 NOT NULL,
	PRIMARY KEY (ID),
	CONSTRAINT REPORTS_U UNIQUE (REPORTNAME),
	CONSTRAINT REPORTS_FK1 FOREIGN KEY (CAMPUSID) REFERENCES CAMPUSES (ID)
);

CREATE OR REPLACE TRIGGER REPORTS_T 
BEFORE INSERT OR UPDATE ON REPORTS
FOR EACH ROW
DECLARE 
	OBJECTMODIFICATION EXCEPTION;
BEGIN
	IF UPDATING AND NOT :NEW.ROWSTAMP = :OLD.ROWSTAMP THEN
		RAISE OBJECTMODIFICATION;
	END IF;

	SELECT DBMS_RANDOM.STRING('U',10) INTO :NEW.ROWSTAMP FROM DUAL;
	EXCEPTION 
	   WHEN OBJECTMODIFICATION THEN
	   RAISE_APPLICATION_ERROR(-20100,'Record has been modified by another user');
END;
/

create index reports_idx11 on reports (requestedby);
create index reports_idx12 on reports (registeredby);
create index reports_idx13 on reports (campusid);
create index reports_idx14 on reports (isallcampus);
create index reports_idx15 on reports (category);
create index reports_idx16 on reports (status);
	
	
CREATE SEQUENCE REPORTRUNHISTORYSEQ;

CREATE TABLE REPORTRUNHISTORY (
	ID VARCHAR2(10) NOT NULL,
	USERID VARCHAR2(10) NOT NULL,
	REPORTID VARCHAR2(10) NOT NULL,
	FILEFORMAT VARCHAR2(20) NOT NULL,
	RANON TIMESTAMP NOT NULL,
	FILELOCATION VARCHAR2(2000) NOT NULL,
	PRIMARY KEY (ID),
	CONSTRAINT REPORTRUNHISTORY_FK1 FOREIGN KEY (USERID) REFERENCES USERS (ID),
	CONSTRAINT REPORTRUNHISTORY_FK2 FOREIGN KEY (REPORTID) REFERENCES REPORTS (ID)
);

CREATE OR REPLACE TRIGGER REPORTRUNHISTORY_T 
BEFORE UPDATE ON REPORTRUNHISTORY
FOR EACH ROW
BEGIN
        RAISE_APPLICATION_ERROR(-20001,'Updates Not Allowed.');
END;
/

CREATE INDEX REPORTRUNHISTORY_IDX10 ON REPORTRUNHISTORY (REPORTID);
CREATE INDEX REPORTRUNHISTORY_IDX11 ON REPORTRUNHISTORY (USERID, REPORTID);
CREATE INDEX REPORTRUNHISTORY_IDX12 ON REPORTRUNHISTORY (RANON);

CREATE SEQUENCE REPORTRUNPARAMETERSSEQ;

CREATE TABLE REPORTRUNPARAMETERS (
ID VARCHAR2(10) NOT NULL,
REPORTRUNHISTORYID VARCHAR2(10) NOT NULL,
PARAMETERNUMBER NUMBER(5) DEFAULT 1 NOT NULL,
PARAMETERNAME VARCHAR2(100) NOT NULL,
PARAMETERVALUE VARCHAR2(1000) NOT NULL,
PRIMARY KEY (ID),
CONSTRAINT REPORTRUNPARAMETERS_U UNIQUE (REPORTRUNHISTORYID, PARAMETERNAME),
CONSTRAINt REPORTRUNPARAMETERS_FK1 FOREIGN KEY (REPORTRUNHISTORYID) REFERENCES REPORTRUNHISTORY (ID)
);

CREATE OR REPLACE TRIGGER REPORTRUNPARAMETERS_T
BEFORE UPDATE ON REPORTRUNPARAMETERS
FOR EACH ROW
BEGIN
	RAISE_APPLICATION_ERROR(-20001, 'Update report run parameter not allowed.');
END;
/

CREATE INDEX REPORTRUNPARAMETERS_IDX10 ON REPORTRUNPARAMETERS (REPORTRUNHISTORYID);
CREATE SEQUENCE REPORTPARAMETERSEQ;

CREATE TABLE REPORTPARAMETERS (
	ID VARCHAR2(10) NOT NULL,
	ROWSTAMP VARCHAR2(10) NOT NULL,
	REPORTID VARCHAR2(10) NOT NULL,
	PARAMETERNUMBER NUMBER(5) DEFAULT 1 NOT NULL,
	PARAMETER VARCHAR2(200),
	PARAMETERTYPE VARCHAR2(20),
	LISTNAME VARCHAR2(200),
	PRIMARY KEY (ID),
	CONSTRAINT REPORTPARAMETERS_U UNIQUE (REPORTID, PARAMETER),
	CONSTRAINT REPORTPARAMETERS_FK1 FOREIGN KEY (REPORTID) REFERENCES REPORTS (ID),
	CONSTRAINT REPORTPARAMETERS_FK2 FOREIGN KEY (LISTNAME) REFERENCES LISTS (LISTNAME)
);

CREATE OR REPLACE TRIGGER REPORTPARAMETERS_T 
BEFORE INSERT OR UPDATE ON REPORTPARAMETERS
FOR EACH ROW
DECLARE 
	OBJECTMODIFICATION EXCEPTION;
BEGIN
	IF UPDATING AND NOT :NEW.ROWSTAMP = :OLD.ROWSTAMP THEN
		RAISE OBJECTMODIFICATION;
	END IF;

	SELECT DBMS_RANDOM.STRING('U',10) INTO :NEW.ROWSTAMP FROM DUAL;
	EXCEPTION 
	   WHEN OBJECTMODIFICATION THEN
		RAISE_APPLICATION_ERROR(-20100,'Record has been modified by another user');
END;
/

CREATE INDEX REPORTPARAMETERS_IDX10 ON REPORTPARAMETERS (REPORTID);
CREATE INDEX REPORTPARAMETERS_IDX11 ON REPORTPARAMETERS (REPORTID, PARAMETERNUMBER);
CREATE SEQUENCE REPORTMODIFICATIONHISTORYSEQ;

CREATE TABLE REPORTMODIFICATIONHISTORY (
	ID VARCHAR2(10) NOT NULL,
	REPORTID VARCHAR2(10) NOT NULL,
	FILENAME VARCHAR2(300) NOT NULL,
	REQUESTED TIMESTAMP NOT NULL,
	REQUESTEDBY VARCHAR2(10) NOT NULL, /* SHOULD THIS BE PERSONID IN PROJEX4 */
	REQUESTERBUSINESSUNIT VARCHAR2(10),
	REQUESTERBUSINESSUNITNAME VARCHAR2(30),
	REQUESTERSUPERDIVISION VARCHAR2(10),
	REQUESTERSUPERDIVISIONNAME VARCHAR2(30),
	REQUESTERDIVISION VARCHAR2(10),
	REQUESTERDIVISIONNAME VARCHAR2(100),
	REQUESTERDEPARTMENT VARCHAR2(10),
	REQUESTERDEPARTMENTNAME VARCHAR2(100),
	REQUESTERSUBDEPARTMENT VARCHAR2(10),
	REQUESTERSUBDEPARTMENTNAME VARCHAR2(100),
	REQUESTERDEPTID VARCHAR2(10),
	REQUESTERDEPTIDNAME VARCHAR2(30),
	REASON	VARCHAR2(4000) NOT NULL,
	REGISTERED TIMESTAMP NOT NULL, 
	REGISTEREDBY VARCHAR2(10) NOT NULL, /* THIS SHOULD BE USERID IN PROJEX 4 */
	REGISTERERBUSINESSUNIT VARCHAR2(10),
	REGISTERERBUSINESSUNITNAME VARCHAR2(30),
	REGISTERERSUPERDIVISION VARCHAR2(10),
	REGISTERERSUPERDIVISIONNAME VARCHAR2(30),
	REGISTERERDIVISION VARCHAR2(10),
	REGISTERERDIVISIONNAME VARCHAR2(100),
	REGISTERERDEPARTMENT VARCHAR2(10),
	REGISTERERDEPARTMENTNAME VARCHAR2(100),
	REGISTERERSUBDEPARTMENT VARCHAR2(10),
	REGISTERERSUBDEPARTMENTNAME VARCHAR2(100),
	REGISTERERDEPTID VARCHAR2(10),
	REGISTERERDEPTIDNAME VARCHAR2(30),
	CATEGORY VARCHAR2(500),
	TOOL VARCHAR2(50),
	TOOLVERSION VARCHAR2(50),
	PRIMARY KEY (ID)
);

CREATE OR REPLACE TRIGGER REPORTMODIFICATIONHISTORY_T 
BEFORE UPDATE ON REPORTMODIFICATIONHISTORY
FOR EACH ROW
BEGIN
	RAISE_APPLICATION_ERROR(-20001,'Updates Not Allowed.');
END;
/

CREATE INDEX REPORTMODHISTORY_IDX10 ON REPORTMODIFICATIONHISTORY (REPORTID);
CREATE OR REPLACE VIEW REPORTSVIEW AS 
SELECT 
	A.ID, 
	A.REPORTNAME, 
	A.DESCRIPTION, 
	A.HELPTEXT, 
	A.CAMPUSID,
	A.ISALLCAMPUS,
	A.ISACTIVE,
	B.PARAMETERNUMBER,
	B.PARAMETER,
	B.PARAMETERTYPE,
	B.LISTNAME
FROM REPORTS A 
INNER JOIN REPORTPARAMETERS B ON A.ID = B.REPORTID;
/* Handles Report modification history */

CREATE OR REPLACE TRIGGER REPORTS_T2
AFTER UPDATE ON REPORTS
FOR EACH ROW
BEGIN
	
	INSERT INTO REPORTMODIFICATIONHISTORY
	(ID, REPORTID, FILENAME, REQUESTED, REQUESTEDBY, REASON, REGISTERED, REGISTEREDBY, CATEGORY)
	VALUES 
	(REPORTMODIFICATIONHISTORYSEQ.NEXTVAL, :NEW.ID, :NEW.FILENAME, :NEW.REQUESTED, 
		:NEW.REQUESTEDBY, :NEW.REASON, :NEW.REGISTERED, :NEW.REGISTEREDBY, :NEW.CATEGORY);
	
	
END;
/

SHO ERRORS
CREATE SEQUENCE SECURITYGROUPREPORTSEQ;

CREATE TABLE SECURITYGROUPREPORTS (
	ID VARCHAR2(10) NOT NULL,
	ROWSTAMP VARCHAR2(10) NOT NULL,
	SECURITYGROUPID VARCHAR2(10) NOT NULL,
	REPORTID VARCHAR2(10) NOT NULL,
	PRIMARY KEY (ID),
	CONSTRAINT SECURITYGROUPREPORTS_U UNIQUE (SECURITYGROUPID, REPORTID),
	CONSTRAINT SECURITYGROUPREPORTS_FK1 FOREIGN KEY (SECURITYGROUPID) REFERENCES SECURITYGROUPS (ID),
	CONSTRAINT SECURITYGROUPREPORTS_FK2 FOREIGN KEY (REPORTID) REFERENCES REPORTS (ID)
);

CREATE OR REPLACE TRIGGER SECURITYGROUPREPORTS_T 
BEFORE INSERT OR UPDATE ON SECURITYGROUPREPORTS
FOR EACH ROW
DECLARE 
	OBJECTMODIFICATION EXCEPTION;
BEGIN
	IF UPDATING AND NOT :NEW.ROWSTAMP = :OLD.ROWSTAMP THEN
		RAISE OBJECTMODIFICATION;
	END IF;
	SELECT DBMS_RANDOM.STRING('U',10) INTO :NEW.ROWSTAMP FROM DUAL;
	EXCEPTION 
	   WHEN OBJECTMODIFICATION THEN
		RAISE_APPLICATION_ERROR(-20100,'Record has been modified by another user');
END;
/

CREATE INDEX SECURITYGROUPREPORTS_IDX1 ON SECURITYGROUPREPORTS (SECURITYGROUPID);
CREATE INDEX SECURITYGROUPREPORTS_IDX2 ON SECURITYGROUPREPORTS (REPORTID);
CREATE SEQUENCE REPORTDATASOURCESEQ;

CREATE TABLE REPORTDATASOURCES (
	ID VARCHAR2(10) NOT NULL,
	ROWSTAMP VARCHAR2(10) NOT NULL,
	REPORTID VARCHAR2(10) NOT NULL,
	DRIVERMETHOD VARCHAR2(50),
	SERVER VARCHAR2(50),
	SERVERPORT VARCHAR2(10),
	DATABASE VARCHAR2(50),
	USERNAME VARCHAR2(50),
	PASSWORD VARCHAR2(50),
	PRIMARY KEY(ID)
);

CREATE OR REPLACE TRIGGER REPORTDATASOURCES_T 
BEFORE INSERT OR UPDATE ON REPORTDATASOURCES
FOR EACH ROW
DECLARE 
	OBJECTMODIFICATION EXCEPTION;
BEGIN
	IF UPDATING AND NOT :NEW.ROWSTAMP = :OLD.ROWSTAMP THEN
		RAISE OBJECTMODIFICATION;
	END IF;

	SELECT DBMS_RANDOM.STRING('U',10) INTO :NEW.ROWSTAMP FROM DUAL;
	EXCEPTION 
	   WHEN OBJECTMODIFICATION THEN
	   RAISE_APPLICATION_ERROR(-20100,'Record has been modified by another user');
END;
/
	
CREATE SEQUENCE REPORTCRONTASKSEQ;

CREATE TABLE REPORTCRONTASKS (
	ID VARCHAR2(10) NOT NULL,
	ROWSTAMP VARCHAR2(10) NOT NULL,
	REPORTID VARCHAR2(10) NOT NULL,
	SCHEDULEDBY VARCHAR2(10) NOT NULL,
	SCHEDULED TIMESTAMP NOT NULL,
	CRONEXPRESSION VARCHAR2(200) NOT NULL,
	ISACTIVE NUMBER(1) DEFAULT 1 NOT NULL,
	FILEFORMAT VARCHAR2(200) NOT NULL,
	ISONETIME NUMBER(1) DEFAULT 0 NOT NULL,
	PRIMARY KEY (ID),
	CONSTRAINT REPORTCRONTASKS_U UNIQUE (REPORTID, SCHEDULEDBY, CRONEXPRESSION),
	CONSTRAINT REPORTCRONTASKS_FK1 FOREIGN KEY (REPORTID) REFERENCES REPORTS (ID),
	CONSTRAINT REPORTCRONTASKS_FK2 FOREIGN KEY (SCHEDULEDBY) REFERENCES USERS (ID)
);

CREATE OR REPLACE TRIGGER REPORTCRONTASKS_T 
BEFORE INSERT OR UPDATE ON REPORTCRONTASKS
FOR EACH ROW
DECLARE 
	OBJECTMODIFICATION EXCEPTION;
BEGIN
	
	IF UPDATING AND NOT :NEW.ROWSTAMP = :OLD.ROWSTAMP THEN
		RAISE OBJECTMODIFICATION;
	END IF;

	SELECT DBMS_RANDOM.STRING('U',10) INTO :NEW.ROWSTAMP FROM DUAL;
	EXCEPTION 
	   WHEN OBJECTMODIFICATION THEN
	   RAISE_APPLICATION_ERROR(-20100,'Record has been modified by another u
ser');
END;
/

CREATE INDEX REPORTCRONTASKS_IDX1 ON REPORTCRONTASKS (ISACTIVE);
CREATE INDEX REPORTCRONTASKS_IDX2 ON REPORTCRONTASKS (REPORTID);
CREATE INDEX REPORTCRONTASKS_IDX3 ON REPORTCRONTASKS (SCHEDULEDBY);
CREATE SEQUENCE REPORTCRONTASKPARAMETERSEQ;

CREATE TABLE REPORTCRONTASKPARAMETERS (
	ID	VARCHAR2(10) NOT NULL,
	ROWSTAMP VARCHAR2(10) NOT NULL,
	REPORTCRONTASKID VARCHAR2(10) NOT NULL,
	PARAMETERNUMBER NUMBER(5) NOT NULL,
	PARAMETERTYPE VARCHAR2(20) NOT NULL,
	PARAMETERNAME VARCHAR2(100) NOT NULL,
	PARAMETERVALUE VARCHAR2(1000) NOT NULL,
	PRIMARY KEY (ID),
	CONSTRAINT REPORTCRONTASKPARAMETER_FK1 FOREIGN KEY (REPORTCRONTASKID) REFERENCES REPORTCRONTASKS (ID)
);

CREATE OR REPLACE TRIGGER REPORTCRONTASKPARAMETERS_T 
BEFORE INSERT OR UPDATE ON REPORTCRONTASKPARAMETERS
FOR EACH ROW
DECLARE 
	OBJECTMODIFICATION EXCEPTION;
BEGIN
	
	IF UPDATING AND NOT :NEW.ROWSTAMP = :OLD.ROWSTAMP THEN
		RAISE OBJECTMODIFICATION;
	END IF;

	SELECT DBMS_RANDOM.STRING('U',10) INTO :NEW.ROWSTAMP FROM DUAL;
	EXCEPTION 
	   WHEN OBJECTMODIFICATION THEN
	   RAISE_APPLICATION_ERROR(-20100,'Record has been modified by another u
ser');
END;
/

CREATE INDEX REPORTCRONTASKPARAMETERS_IDX1 ON REPORTCRONTASKPARAMETERS (REPORTCRONTASKID);
CREATE SEQUENCE REPORTCRONTASKEMAILSEQ;

CREATE TABLE REPORTCRONTASKEMAILS (
	ID VARCHAR2(10) NOT NULL,
	ROWSTAMP VARCHAR2(10) NOT NULL,
	REPORTCRONTASKID VARCHAR2(10) NOT NULL,
	EMAILADDRESS VARCHAR2(100) NOT NULL,
	PRIMARY KEY (ID),
	CONSTRAINT REPORTCRONTASKEMAILS_U UNIQUE (REPORTCRONTASKID, EMAILADDRESS),
	CONSTRAINT REPORTCRONTASKEMAILS_FK1 FOREIGN KEY (REPORTCRONTASKID) REFERENCES REPORTCRONTASKS (ID)
);

CREATE OR REPLACE TRIGGER REPORTCRONTASKEMAILS_T 
BEFORE INSERT OR UPDATE ON REPORTCRONTASKEMAILS
FOR EACH ROW
DECLARE 
	OBJECTMODIFICATION EXCEPTION;
BEGIN
	
	IF UPDATING AND NOT :NEW.ROWSTAMP = :OLD.ROWSTAMP THEN
		RAISE OBJECTMODIFICATION;
	END IF;

	SELECT DBMS_RANDOM.STRING('U',10) INTO :NEW.ROWSTAMP FROM DUAL;
	EXCEPTION 
	   WHEN OBJECTMODIFICATION THEN
	   RAISE_APPLICATION_ERROR(-20100,'Record has been modified by another u
ser');
END;
/


CREATE OR REPLACE VIEW REPORTCRONTASKDETAILS AS
SELECT 
	A.ID,
	A.ROWSTAMP,
	A.REPORTID,
	C.REPORTNAME,
	C.DESCRIPTION,
	C.CATEGORY,
	CASE 
		WHEN C.ISACTIVE = 0 THEN 0 
		WHEN A.ISACTIVE = 0 THEN 0 
		ELSE 1
	END AS ISACTIVE,
	A.SCHEDULED,
	A.SCHEDULEDBY,
	B.USERLOGIN AS SCHEDULEDBYUSERNAME,
	A.CRONEXPRESSION,
	A.FILEFORMAT,
	A.ISONETIME
FROM REPORTCRONTASKS A
INNER JOIN USERS B ON B.ID = A.SCHEDULEDBY
INNER JOIN REPORTS C ON C.ID = A.REPORTID;

CREATE OR REPLACE PACKAGE REPORT AS

FUNCTION REPORT (VID IN VARCHAR2, VROWSTAMP IN VARCHAR2, 
	VREPORTNAME IN VARCHAR2, VDESCRIPTION IN VARCHAR2,
	VHELPTEXT IN VARCHAR2, VCAMPUSID IN VARCHAR2, 
	VISALLCAMPUS IN NUMBER, VISACTIVE IN NUMBER, 
	VFILENAME IN VARCHAR2, VREQUESTED IN TIMESTAMP, 
	VREQUESTEDBY IN VARCHAR2, 
	VREQUESTERBUSINESSUNIT IN VARCHAR2,
	VREQUESTERBUSINESSUNITNAME IN VARCHAR2,
	VREQUESTERSUPERDIVISION IN VARCHAR2,
	VREQUESTERSUPERDIVISIONNAME IN VARCHAR2,
	VREQUESTERDIVISION IN VARCHAR2,
	VREQUESTERDIVISIONNAME IN VARCHAR2,
	VREQUESTERDEPARTMENT IN VARCHAR2,
	VREQUESTERDEPARTMENTNAME IN VARCHAR2,
	VREQUESTERSUBDEPARTMENT IN VARCHAR2,
	VREQUESTERSUBDEPARTMENTNAME IN VARCHAR2,
	VREQUESTERDEPTID IN VARCHAR2,
	VREQUESTERDEPTIDNAME IN VARCHAR2,
	VREASON IN VARCHAR2, 
	VREGISTERED IN TIMESTAMP, VREGISTEREDBY IN VARCHAR2, 
	VCATEGORY IN VARCHAR2, VTOOL IN VARCHAR2,
	VTOOLVERSION IN VARCHAR2, VRUNTIMEENVIRONMENT IN VARCHAR2,
	VPROGRAMVERSION IN VARCHAR2, VSTATUS IN VARCHAR2, 
	VSTATUSED IN TIMESTAMP, VSTATUSEDBY IN VARCHAR2,
	VISSLOWRUNNING IN NUMBER) RETURN VARCHAR2;
	
FUNCTION REPORTRUNHISTORY (VUSERID IN VARCHAR2, VREPORTID IN VARCHAR2, VFILEFORMAT IN VARCHAR2, VFILELOCATION IN VARCHAR2 ) RETURN VARCHAR2;

FUNCTION REPORTRUNPARAMETER (VID IN VARCHAR2, VREPORTRUNHISTORYID IN VARCHAR2, VPARAMETERNUMBER IN NUMBER, 
	VPARAMETERNAME IN VARCHAR2, VPARAMETERVALUE IN VARCHAR2 ) RETURN VARCHAR2;

FUNCTION REPORTPARAMETER (VID IN VARCHAR2, VROWSTAMP IN VARCHAR2, VREPORTID IN VARCHAR2, 
	VPARAMETERNUMBER IN NUMBER, VPARAMETER IN VARCHAR2, VPARAMETERTYPE IN VARCHAR2, VLISTNAME IN VARCHAR2) RETURN VARCHAR2;
	
FUNCTION SECURITYGROUPREPORT(VID IN VARCHAR2, VROWSTAMP IN VARCHAR2, VSECURITYGROUPID IN VARCHAR2, VREPORTID IN VARCHAR2) RETURN VARCHAR2;

FUNCTION REPORTCRONTASK(VID IN VARCHAR2, VROWSTAMP IN VARCHAR2, VREPORTID IN VARCHAR2, VSCHEDULEDBY IN VARCHAR2, VSCHEDULED IN TIMESTAMP,
	VCRONEXPRESSION IN VARCHAR2, VISACTIVE IN NUMBER, VFILEFORMAT IN VARCHAR2, VISONETIME IN NUMBER) RETURN VARCHAR2;
	
FUNCTION REPORTCRONTASKPARAMETER(VID IN VARCHAR2, VROWSTAMP IN VARCHAR2, VREPORTCRONTASKID IN VARCHAR2, 
	VPARAMETERNUMBER IN NUMBER, VPARAMETERTYPE IN VARCHAR2, VPARAMETERNAME IN VARCHAR2, VPARAMETERVALUE IN VARCHAR2) RETURN VARCHAR2;
	
FUNCTION REPORTCRONTASKEMAIL(VID IN VARCHAR2, VROWSTAMP IN VARCHAR2, VREPORTCRONTASKID IN VARCHAR2, 
	VEMAILADDRESS IN VARCHAR2) RETURN VARCHAR2;

END REPORT;
/

show errors
CREATE OR REPLACE PACKAGE BODY REPORT AS

FUNCTION REPORT(VID IN VARCHAR2, VROWSTAMP IN VARCHAR2, 
	VREPORTNAME IN VARCHAR2, VDESCRIPTION IN VARCHAR2,
	VHELPTEXT IN VARCHAR2, VCAMPUSID IN VARCHAR2,
	VISALLCAMPUS IN NUMBER, VISACTIVE IN NUMBER,
	VFILENAME IN VARCHAR2, VREQUESTED IN TIMESTAMP, 
	VREQUESTEDBY IN VARCHAR2, 
	VREQUESTERBUSINESSUNIT IN VARCHAR2,
	VREQUESTERBUSINESSUNITNAME IN VARCHAR2,
	VREQUESTERSUPERDIVISION IN VARCHAR2,
	VREQUESTERSUPERDIVISIONNAME IN VARCHAR2,
	VREQUESTERDIVISION IN VARCHAR2,
	VREQUESTERDIVISIONNAME IN VARCHAR2,
	VREQUESTERDEPARTMENT IN VARCHAR2,
	VREQUESTERDEPARTMENTNAME IN VARCHAR2,
	VREQUESTERSUBDEPARTMENT IN VARCHAR2,
	VREQUESTERSUBDEPARTMENTNAME IN VARCHAR2,
	VREQUESTERDEPTID IN VARCHAR2,
	VREQUESTERDEPTIDNAME IN VARCHAR2,
	VREASON IN VARCHAR2, 
	VREGISTERED IN TIMESTAMP, VREGISTEREDBY IN VARCHAR2, 
	VCATEGORY IN VARCHAR2, VTOOL IN VARCHAR2,
	VTOOLVERSION IN VARCHAR2, VRUNTIMEENVIRONMENT IN VARCHAR2,
	VPROGRAMVERSION IN VARCHAR2, VSTATUS IN VARCHAR2,
	VSTATUSED IN TIMESTAMP, VSTATUSEDBY IN VARCHAR2,
	VISSLOWRUNNING IN NUMBER)
RETURN VARCHAR2 IS
NID VARCHAR2(10);
BEGIN
	IF VID IS NULL THEN
		SELECT REPORTSEQ.NEXTVAL INTO NID FROM DUAL;
	ELSE 
		NID := VID;
	END IF;

	MERGE INTO REPORTS A
	USING (SELECT ID FROM (SELECT ID FROM REPORTS WHERE ID = NID UNION ALL SELECT NULL ID FROM DUAL) WHERE ROWNUM = 1) B
	ON (A.ID = B.ID)
	WHEN MATCHED THEN 
	UPDATE SET 
		A.ROWSTAMP = VROWSTAMP, A.REPORTNAME = VREPORTNAME,
		A.DESCRIPTION = VDESCRIPTION, A.HELPTEXT = VHELPTEXT,
		A.CAMPUSID = VCAMPUSID, A.ISALLCAMPUS = VISALLCAMPUS, 
		A.ISACTIVE = VISACTIVE, A.FILENAME = VFILENAME, 
		A.REQUESTED = VREQUESTED, A.REQUESTEDBY = VREQUESTEDBY, 
		A.REQUESTERBUSINESSUNIT = VREQUESTERBUSINESSUNIT,
		A.REQUESTERBUSINESSUNITNAME = VREQUESTERBUSINESSUNITNAME,
		A.REQUESTERSUPERDIVISION = VREQUESTERSUPERDIVISION,
		A.REQUESTERSUPERDIVISIONNAME = VREQUESTERSUPERDIVISIONNAME,
		A.REQUESTERDIVISION = VREQUESTERDIVISION,
		A.REQUESTERDIVISIONNAME = VREQUESTERDIVISIONNAME,
		A.REQUESTERDEPARTMENT = VREQUESTERDEPARTMENT,
		A.REQUESTERDEPARTMENTNAME = VREQUESTERDEPARTMENTNAME,
		A.REQUESTERSUBDEPARTMENT = VREQUESTERSUBDEPARTMENT,
		A.REQUESTERSUBDEPARTMENTNAME = VREQUESTERSUBDEPARTMENTNAME,
		A.REQUESTERDEPTID = VREQUESTERDEPTID,
		A.REQUESTERDEPTIDNAME = VREQUESTERDEPTIDNAME,
		A.REASON = VREASON, A.REGISTERED = VREGISTERED, 
		A.REGISTEREDBY = VREGISTEREDBY, A.CATEGORY = VCATEGORY,
		A.TOOL = VTOOL, A.TOOLVERSION = VTOOLVERSION,
		A.RUNTIMEENVIRONMENT = VRUNTIMEENVIRONMENT,
		A.PROGRAMVERSION = VPROGRAMVERSION,
		A.STATUS = VSTATUS,
		A.STATUSED = VSTATUSED, 
		A.STATUSEDBY = VSTATUSEDBY,
		A.ISSLOWRUNNING = VISSLOWRUNNING
	WHEN NOT MATCHED THEN
	INSERT (
		A.ID, A.ROWSTAMP, A.REPORTNAME, A.DESCRIPTION, A.HELPTEXT,
		A.CAMPUSID, A.ISALLCAMPUS, A.ISACTIVE, A.FILENAME,
		A.REQUESTED, A.REQUESTEDBY, 
		A.REQUESTERBUSINESSUNIT, A.REQUESTERBUSINESSUNITNAME, 
		A.REQUESTERSUPERDIVISION, A.REQUESTERSUPERDIVISIONNAME,
		A.REQUESTERDIVISION, A.REQUESTERDIVISIONNAME,
		A.REQUESTERDEPARTMENT, A.REQUESTERDEPARTMENTNAME, 
		A.REQUESTERSUBDEPARTMENT, A.REQUESTERSUBDEPARTMENTNAME,
		A.REQUESTERDEPTID, A.REQUESTERDEPTIDNAME,
		A.REASON, A.REGISTERED, A.REGISTEREDBY, A.CATEGORY,
		A.TOOL, A.TOOLVERSION, A.RUNTIMEENVIRONMENT,
		A.PROGRAMVERSION, A.STATUS, A.STATUSED,
		A.STATUSEDBY, A.ISSLOWRUNNING
	) VALUES (
		NID, VROWSTAMP, VREPORTNAME, VDESCRIPTION, VHELPTEXT, 
		VCAMPUSID, VISALLCAMPUS, VISACTIVE, VFILENAME,
		VREQUESTED, VREQUESTEDBY,
		VREQUESTERBUSINESSUNIT, VREQUESTERBUSINESSUNITNAME,
		VREQUESTERSUPERDIVISION, VREQUESTERSUPERDIVISIONNAME,
		VREQUESTERDIVISION, VREQUESTERDIVISIONNAME,
		VREQUESTERDEPARTMENT, VREQUESTERDEPARTMENTNAME,
		VREQUESTERSUBDEPARTMENT, VREQUESTERSUBDEPARTMENTNAME,
		VREQUESTERDEPTID, VREQUESTERDEPTIDNAME,
		VREASON, VREGISTERED, VREGISTEREDBY, VCATEGORY,
		VTOOL, VTOOLVERSION, VRUNTIMEENVIRONMENT, VPROGRAMVERSION,
		VSTATUS, VSTATUSED, VSTATUSEDBY, VISSLOWRUNNING
	);

	IF SQL%ROWCOUNT = 0 THEN
		NID := NULL;
	END IF;

	RETURN NID;
	
END REPORT;

FUNCTION REPORTRUNHISTORY (VUSERID IN VARCHAR2, VREPORTID IN VARCHAR2, VFILEFORMAT IN VARCHAR2, VFILELOCATION IN VARCHAR2 ) 
RETURN VARCHAR2 IS
NID VARCHAR2(10);
BEGIN
	SELECT REPORTRUNHISTORYSEQ.NEXTVAL INTO NID FROM DUAL;

	INSERT INTO REPORTRUNHISTORY (ID, USERID, REPORTID, FILEFORMAT, RANON, FILELOCATION) VALUES (NID, VUSERID, VREPORTID, VFILEFORMAT, SYSTIMESTAMP, VFILELOCATION);
	
	RETURN NID;
END REPORTRUNHISTORY;

FUNCTION REPORTRUNPARAMETER (VID IN VARCHAR2, VREPORTRUNHISTORYID IN VARCHAR2, VPARAMETERNUMBER IN NUMBER, VPARAMETERNAME IN VARCHAR2, VPARAMETERVALUE IN VARCHAR2 ) 
RETURN VARCHAR2 IS
NID VARCHAR2(10);
BEGIN
	SELECT REPORTRUNPARAMETERSSEQ.NEXTVAL INTO NID FROM DUAL;

	INSERT INTO REPORTRUNPARAMETERS (ID, REPORTRUNHISTORYID, PARAMETERNUMBER, PARAMETERNAME, PARAMETERVALUE) 
		VALUES (NID, VREPORTRUNHISTORYID, VPARAMETERNUMBER, VPARAMETERNAME, VPARAMETERVALUE);
	
	RETURN NID;
END REPORTRUNPARAMETER;

FUNCTION REPORTPARAMETER (VID IN VARCHAR2, VROWSTAMP IN VARCHAR2, VREPORTID IN VARCHAR2, VPARAMETERNUMBER IN NUMBER, VPARAMETER IN VARCHAR2, VPARAMETERTYPE IN VARCHAR2, VLISTNAME IN VARCHAR2) RETURN VARCHAR2
IS
NID VARCHAR2(10);
BEGIN
	
	IF VID IS NULL THEN
		SELECT REPORTPARAMETERSEQ.NEXTVAL INTO NID FROM DUAL;
	ELSE 
		NID := VID;
	END IF;

	MERGE INTO REPORTPARAMETERS A
	USING (SELECT ID FROM (SELECT ID FROM REPORTPARAMETERS WHERE ID = NID UNION ALL SELECT NULL ID FROM DUAL) WHERE ROWNUM = 1) B
	ON (A.ID = B.ID)
	WHEN MATCHED THEN 
	UPDATE SET A.ROWSTAMP = VROWSTAMP, A.REPORTID = VREPORTID, A.PARAMETERNUMBER = VPARAMETERNUMBER, A.PARAMETER = VPARAMETER, A.PARAMETERTYPE = VPARAMETERTYPE , A.LISTNAME = VLISTNAME
	WHEN NOT MATCHED THEN
	INSERT (A.ID, A.ROWSTAMP, A.REPORTID, A.PARAMETERNUMBER, A.PARAMETER, A.PARAMETERTYPE, A.LISTNAME) VALUES 
		(NID, VROWSTAMP, VREPORTID, VPARAMETERNUMBER, VPARAMETER, VPARAMETERTYPE, VLISTNAME);

	IF SQL%ROWCOUNT = 0 THEN
		NID := NULL;
	END IF;

	RETURN NID;
	
END REPORTPARAMETER;

FUNCTION SECURITYGROUPREPORT(VID IN VARCHAR2, VROWSTAMP IN VARCHAR2, VSECURITYGROUPID IN VARCHAR2, VREPORTID IN VARCHAR2) RETURN VARCHAR2 IS
NID VARCHAR2(10);
BEGIN
	
	IF VID IS NULL THEN
		SELECT SECURITYGROUPREPORTSEQ.NEXTVAL INTO NID FROM DUAL;
	ELSE 
		NID := VID;
	END IF;

	MERGE INTO SECURITYGROUPREPORTS A
	USING (SELECT ID FROM (SELECT ID FROM SECURITYGROUPREPORTS WHERE ID = NID UNION ALL SELECT NULL ID FROM DUAL) WHERE ROWNUM = 1) B
	ON (A.ID = B.ID)
	WHEN MATCHED THEN 
	UPDATE SET A.ROWSTAMP = VROWSTAMP, A.SECURITYGROUPID = VSECURITYGROUPID,  A.REPORTID = VREPORTID
	WHEN NOT MATCHED THEN
	INSERT (A.ID, A.ROWSTAMP, A.SECURITYGROUPID, A.REPORTID) VALUES 
		(NID, VROWSTAMP, VSECURITYGROUPID, VREPORTID);

	IF SQL%ROWCOUNT = 0 THEN
		NID := NULL;
	END IF;

	RETURN NID;	
	
END SECURITYGROUPREPORT;

FUNCTION REPORTCRONTASK(VID IN VARCHAR2, VROWSTAMP IN VARCHAR2, VREPORTID IN VARCHAR2, VSCHEDULEDBY IN VARCHAR2, VSCHEDULED IN TIMESTAMP, 
	VCRONEXPRESSION IN VARCHAR2, VISACTIVE IN NUMBER, VFILEFORMAT IN VARCHAR2, VISONETIME IN NUMBER) RETURN VARCHAR2 IS
NID VARCHAR2(10);
BEGIN
	
	IF VID IS NULL THEN
		SELECT REPORTCRONTASKSEQ.NEXTVAL INTO NID FROM DUAL;
	ELSE 
		NID := VID;
	END IF;

	MERGE INTO REPORTCRONTASKS A
	USING (SELECT ID FROM (SELECT ID FROM REPORTCRONTASKS WHERE ID = NID UNION ALL SELECT NULL ID FROM DUAL) WHERE ROWNUM = 1) B
	ON (A.ID = B.ID)
	WHEN MATCHED THEN 
	UPDATE SET A.ROWSTAMP = VROWSTAMP, A.REPORTID = VREPORTID, A.SCHEDULEDBY = VSCHEDULEDBY, A.SCHEDULED = VSCHEDULED,
		A.CRONEXPRESSION = VCRONEXPRESSION, A.ISACTIVE = VISACTIVE, A.FILEFORMAT = VFILEFORMAT, A.ISONETIME = VISONETIME
	WHEN NOT MATCHED THEN
	INSERT (A.ID, A.ROWSTAMP, A.REPORTID, A.SCHEDULEDBY, A.SCHEDULED, A.CRONEXPRESSION, A.ISACTIVE, A.FILEFORMAT, A.ISONETIME) VALUES 
		(NID, VROWSTAMP, VREPORTID, VSCHEDULEDBY, VSCHEDULED, VCRONEXPRESSION, VISACTIVE, VFILEFORMAT, VISONETIME);

	IF SQL%ROWCOUNT = 0 THEN
		NID := NULL;
	END IF;

	RETURN NID;	
	
END REPORTCRONTASK;

FUNCTION REPORTCRONTASKPARAMETER(VID IN VARCHAR2, VROWSTAMP IN VARCHAR2, VREPORTCRONTASKID IN VARCHAR2, VPARAMETERNUMBER IN NUMBER, VPARAMETERTYPE IN VARCHAR2, VPARAMETERNAME IN VARCHAR2, VPARAMETERVALUE IN VARCHAR2) RETURN VARCHAR2 IS
NID VARCHAR2(10);
BEGIN
	
	IF VID IS NULL THEN
		SELECT REPORTCRONTASKPARAMETERSEQ.NEXTVAL INTO NID FROM DUAL;
	ELSE 
		NID := VID;
	END IF;

	MERGE INTO REPORTCRONTASKPARAMETERS A
	USING (SELECT ID FROM (SELECT ID FROM REPORTCRONTASKPARAMETERS WHERE ID = NID UNION ALL SELECT NULL ID FROM DUAL) WHERE ROWNUM = 1) B
	ON (A.ID = B.ID)
	WHEN MATCHED THEN 
	UPDATE SET A.ROWSTAMP = VROWSTAMP, A.REPORTCRONTASKID = VREPORTCRONTASKID, A.PARAMETERNUMBER = VPARAMETERNUMBER, A.PARAMETERTYPE = VPARAMETERTYPE, A.PARAMETERNAME = VPARAMETERNAME, A.PARAMETERVALUE = VPARAMETERVALUE 
	WHEN NOT MATCHED THEN
	INSERT (A.ID, A.ROWSTAMP, A.REPORTCRONTASKID, A.PARAMETERNUMBER, A.PARAMETERTYPE, A.PARAMETERNAME, A.PARAMETERVALUE) VALUES 
		(NID, VROWSTAMP, VREPORTCRONTASKID, VPARAMETERNUMBER, VPARAMETERTYPE, VPARAMETERNAME, VPARAMETERVALUE);

	IF SQL%ROWCOUNT = 0 THEN
		NID := NULL;
	END IF;

	RETURN NID;	
	
END REPORTCRONTASKPARAMETER;

FUNCTION REPORTCRONTASKEMAIL(VID IN VARCHAR2, VROWSTAMP IN VARCHAR2, VREPORTCRONTASKID IN VARCHAR2, VEMAILADDRESS IN VARCHAR2) RETURN VARCHAR2 IS
NID VARCHAR2(10);
BEGIN
	
	IF VID IS NULL THEN
		SELECT REPORTCRONTASKEMAILSEQ.NEXTVAL INTO NID FROM DUAL;
	ELSE 
		NID := VID;
	END IF;

	MERGE INTO REPORTCRONTASKEMAILS A
	USING (SELECT ID FROM (SELECT ID FROM REPORTCRONTASKEMAILS WHERE ID = NID UNION ALL SELECT NULL ID FROM DUAL) WHERE ROWNUM = 1) B
	ON (A.ID = B.ID)
	WHEN MATCHED THEN 
	UPDATE SET A.ROWSTAMP = VROWSTAMP, A.REPORTCRONTASKID = VREPORTCRONTASKID, A.EMAILADDRESS = VEMAILADDRESS 
	WHEN NOT MATCHED THEN
	INSERT (A.ID, A.ROWSTAMP, A.REPORTCRONTASKID, A.EMAILADDRESS) VALUES 
		(NID, VROWSTAMP, VREPORTCRONTASKID, VEMAILADDRESS);

	IF SQL%ROWCOUNT = 0 THEN
		NID := NULL;
	END IF;

	RETURN NID;	
	
END REPORTCRONTASKEMAIL;

END REPORT;
/

sho err
