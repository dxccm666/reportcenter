CREATE OR REPLACE PACKAGE BODY SECURITY AS

FUNCTION APPLICATIONRIGHT(VID IN VARCHAR2, VROWSTAMP IN VARCHAR2, VAPPLICATIONID IN VARCHAR2, VRIGHT IN VARCHAR2) 
RETURN VARCHAR2 IS
NID VARCHAR2(10);
BEGIN

	IF VID IS NULL THEN
		SELECT APPLICATIONRIGHTSEQ.NEXTVAL INTO NID FROM DUAL;
	ELSE 
		NID := VID;
	END IF;

	MERGE INTO APPLICATIONRIGHTS A
	USING (SELECT ID FROM (SELECT ID FROM APPLICATIONRIGHTS WHERE ID = NID UNION ALL SELECT NULL ID FROM DUAL) WHERE ROWNUM = 1) B
	ON (A.ID = B.ID)
	WHEN MATCHED THEN 
	UPDATE SET A.ROWSTAMP = VROWSTAMP, A.APPLICATIONID = VAPPLICATIONID, A.RIGHT = VRIGHT
	WHEN NOT MATCHED THEN
	INSERT (A.ID, A.ROWSTAMP, A.APPLICATIONID, A.RIGHT) VALUES 
		(NID, VROWSTAMP ,VAPPLICATIONID, VRIGHT);

	IF SQL%ROWCOUNT = 0 THEN
		NID := NULL;
	END IF;

	RETURN NID;

END APPLICATIONRIGHT;

PROCEDURE APPLICATIONRIGHT(VAPPLICATION IN VARCHAR2, VRIGHT IN VARCHAR2)
IS
LAPPLICATIONID VARCHAR2(10);
NID VARCHAR2(10);
BEGIN
	SELECT ID INTO LAPPLICATIONID FROM APPLICATIONS WHERE NAME = VAPPLICATION;
	NID := APPLICATIONRIGHT(null,'AAAA',LAPPLICATIONID,VRIGHT);
END APPLICATIONRIGHT;

FUNCTION OBJECTCLASSRIGHT(VID IN VARCHAR2, VROWSTAMP IN VARCHAR2, VOBJECTCLASS IN VARCHAR2, VRIGHT IN VARCHAR2)RETURN VARCHAR2 IS
NID VARCHAR2(10);
BEGIN
	IF VID IS NULL THEN 
		SELECT OBJECTCLASSRIGHTSEQ.NEXTVAL INTO NID FROM DUAL;
	ELSE
		NID := VID;
	END IF;

	MERGE INTO OBJECTCLASSRIGHTS A
	USING (SELECT ID FROM (SELECT ID FROM OBJECTCLASSRIGHTS WHERE ID = NID UNION ALL SELECT NULL ID FROM DUAL) WHERE ROWNUM = 1) B
	ON (A.ID = B.ID) 
	WHEN MATCHED THEN
	UPDATE SET A.ROWSTAMP = VROWSTAMP, A.OBJECTCLASS = VOBJECTCLASS, A.RIGHT = VRIGHT
	WHEN NOT MATCHED THEN
	INSERT (A.ID, A.ROWSTAMP, A.OBJECTCLASS, A.RIGHT) VALUES 
		(NID, VROWSTAMP, VOBJECTCLASS, VRIGHT);

	IF SQL%ROWCOUNT = 0 THEN
		NID := NULL;
	END IF;

	RETURN NID;

END OBJECTCLASSRIGHT;

PROCEDURE OBJECTCLASSRIGHT(VOBJECTCLASS IN VARCHAR2, VRIGHT IN VARCHAR2) IS
NID VARCHAR2(10);
BEGIN
	NID := OBJECTCLASSRIGHT (null, 'AAAA', VOBJECTCLASS, VRIGHT);
END OBJECTCLASSRIGHT;

FUNCTION SECURITYGROUP (VID IN VARCHAR2, VROWSTAMP IN VARCHAR2, VSECURITYGROUPNAME IN VARCHAR2, VDESCRIPTION IN VARCHAR2, VISACTIVE IN NUMBER, VISSYSTEMSECURITYGROUP IN NUMBER) RETURN VARCHAR2 IS
NID VARCHAR2(10);
BEGIN
        IF VID IS NULL THEN 
                SELECT SECURITYGROUPSEQ.NEXTVAL INTO NID FROM DUAL;
        ELSE
                NID := VID;
        END IF;
        
		MERGE INTO SECURITYGROUPS A
        USING (SELECT ID FROM (SELECT ID FROM SECURITYGROUPS WHERE ID = NID UNION ALL SELECT NULL ID FROM DUAL) WHERE ROWNUM = 1) B
        ON (A.ID = B.ID)
        WHEN MATCHED THEN       
		UPDATE SET A.ROWSTAMP = VROWSTAMP, A.SECURITYGROUPNAME = VSECURITYGROUPNAME, A.DESCRIPTION = VDESCRIPTION, A.ISACTIVE = VISACTIVE, A.ISSYSTEMSECURITYGROUP = VISSYSTEMSECURITYGROUP
        WHEN NOT MATCHED THEN
		INSERT (A.ID,  A.ROWSTAMP, A.SECURITYGROUPNAME, A.DESCRIPTION, A.ISACTIVE, A.ISSYSTEMSECURITYGROUP) VALUES 
			(NID,  VROWSTAMP, VSECURITYGROUPNAME, VDESCRIPTION, VISACTIVE, VISSYSTEMSECURITYGROUP);
			
        IF SQL%ROWCOUNT = 0 THEN
                NID := NULL;
        END IF;

        RETURN NID;
        
END SECURITYGROUP;


PROCEDURE SECURITYGROUP(VSECURITYGROUPNAME IN VARCHAR2, VDESCRIPTION IN VARCHAR2, VISACTIVE IN NUMBER, VISSYSTEMSECURITYGROUP IN NUMBER) IS
NID VARCHAR2(10);
BEGIN
	NID := SECURITYGROUP(null, 'AAAA', VSECURITYGROUPNAME, VDESCRIPTION, VISACTIVE, VISSYSTEMSECURITYGROUP);
END SECURITYGROUP;


FUNCTION SECURITYGROUPUSERTYPE(VID IN VARCHAR2, VROWSTAMP IN VARCHAR2, VSECURITYGROUPID IN VARCHAR2, VUSERTYPE IN VARCHAR2, VREGISTRATIONMETHOD IN VARCHAR2, VISDEFAULT IN NUMBER) RETURN VARCHAR2 
IS 
NID VARCHAR2(10);
BEGIN
        IF VID IS NULL THEN 
                SELECT SECURITYGROUPUSERTYPESEQ.NEXTVAL INTO NID FROM DUAL;
        ELSE
                NID := VID;
        END IF;
        
       	MERGE INTO SECURITYGROUPUSERTYPES A
        USING (SELECT ID FROM (SELECT ID FROM SECURITYGROUPUSERTYPES WHERE ID = NID UNION ALL SELECT NULL ID FROM DUAL) WHERE ROWNUM = 1) B
        ON (A.ID = B.ID)
        WHEN MATCHED THEN        
		UPDATE SET A.ROWSTAMP = VROWSTAMP, A.SECURITYGROUPID = VSECURITYGROUPID, A.USERTYPE = VUSERTYPE, A.REGISTRATIONMETHOD = VREGISTRATIONMETHOD, A.ISDEFAULT = VISDEFAULT
		WHEN NOT MATCHED THEN
		INSERT (A.ID, A.ROWSTAMP, A.SECURITYGROUPID, A.USERTYPE, A.REGISTRATIONMETHOD, A.ISDEFAULT) VALUES 
			(NID, VROWSTAMP, VSECURITYGROUPID, VUSERTYPE, VREGISTRATIONMETHOD, VISDEFAULT);
			
        IF SQL%ROWCOUNT = 0 THEN
                NID := NULL;
        END IF;

        RETURN NID;
        
END SECURITYGROUPUSERTYPE;


PROCEDURE SECURITYGROUPUSERTYPE(VSECURITYGROUPNAME IN VARCHAR2, VUSERTYPE IN VARCHAR2, VREGISTRATIONMETHOD IN VARCHAR2, VISDEFAULT IN NUMBER) IS 
NSECURITYGROUPID VARCHAR2(10);
NID VARCHAR2(10);
BEGIN
	SELECT ID INTO NSECURITYGROUPID FROM SECURITYGROUPS WHERE SECURITYGROUPNAME = VSECURITYGROUPNAME;
	NID := SECURITYGROUPUSERTYPE(null, 'AAAA', NSECURITYGROUPID, VUSERTYPE, VREGISTRATIONMETHOD, NVL(VISDEFAULT,0));
END SECURITYGROUPUSERTYPE;


FUNCTION SECURITYGROUPUSER(VID IN VARCHAR2, VROWSTAMP IN VARCHAR2, VSECURITYGROUPID IN VARCHAR2, VUSERID IN VARCHAR2) RETURN VARCHAR2 
IS 
NID VARCHAR2(10);
BEGIN
        IF VID IS NULL THEN 
                SELECT SECURITYGROUPUSERSEQ.NEXTVAL INTO NID FROM DUAL;
        ELSE
                NID := VID;
        END IF;
        
        IF VSECURITYGROUPID IS NULL OR VUSERID IS NULL THEN
        	RETURN NID;
        END IF;
        
       	MERGE INTO SECURITYGROUPUSERS A
        USING (SELECT ID FROM (SELECT ID FROM SECURITYGROUPUSERS WHERE ID = NID UNION ALL SELECT NULL ID FROM DUAL) WHERE ROWNUM = 1) B
        ON (A.ID = B.ID)
        WHEN MATCHED THEN        
		UPDATE SET A.ROWSTAMP = VROWSTAMP, A.SECURITYGROUPID = VSECURITYGROUPID, A.USERID = VUSERID
		WHEN NOT MATCHED THEN
		INSERT (A.ID, A.ROWSTAMP, A.SECURITYGROUPID, A.USERID) VALUES 
			(NID, VROWSTAMP, VSECURITYGROUPID, VUSERID);
			
        IF SQL%ROWCOUNT = 0 THEN
                NID := NULL;
        END IF;

        RETURN NID;

	EXCEPTION 
		WHEN OTHERS THEN
			RETURN NID;

END SECURITYGROUPUSER;

PROCEDURE SECURITYGROUPUSER(VSECURITYGROUPNAME IN VARCHAR2, VUSERLOGIN IN VARCHAR2) IS 
NSECURITYGROUPID VARCHAR2(10);
NUSERID VARCHAR2(10);
NID VARCHAR2(10);
BEGIN
	SELECT ID INTO NSECURITYGROUPID FROM SECURITYGROUPS WHERE SECURITYGROUPNAME = VSECURITYGROUPNAME;
	SELECT ID INTO NUSERID FROM USERS WHERE USERLOGIN = VUSERLOGIN;
	NID := SECURITYGROUPUSER(null, 'AAAA', NSECURITYGROUPID, NUSERID);

	EXCEPTION WHEN NO_DATA_FOUND THEN 
		DBMS_OUTPUT.PUT_LINE('ERROR EXECUTING SECURITYGROUPUSER FOR SECURITYGROUP '||VSECURITYGROUPNAME ||' USER '||VUSERLOGIN);
END SECURITYGROUPUSER;


FUNCTION APPLICATIONPERMISSION(VID IN VARCHAR2, VROWSTAMP IN VARCHAR2, VAPPLICATIONID IN VARCHAR2, VREFID IN VARCHAR2, VREFIDTYPE IN VARCHAR2)
RETURN VARCHAR2 IS
NID VARCHAR2(10);
BEGIN

	IF VID IS NULL THEN
		SELECT APPLICATIONPERMISSIONSEQ.NEXTVAL INTO NID FROM DUAL;
	ELSE 
		NID := VID;
	END IF;

	MERGE INTO APPLICATIONPERMISSIONS A
	USING (SELECT ID FROM (SELECT ID FROM APPLICATIONPERMISSIONS WHERE ID = NID UNION ALL SELECT NULL ID FROM DUAL) WHERE ROWNUM = 1) B
	ON (A.ID = B.ID)
	WHEN MATCHED THEN 
	UPDATE SET A.ROWSTAMP = VROWSTAMP, A.APPLICATIONID = VAPPLICATIONID, A.REFID = VREFID, A.REFIDTYPE=VREFIDTYPE
	WHEN NOT MATCHED THEN
	INSERT (A.ID, A.ROWSTAMP, A.APPLICATIONID, A.REFID, A.REFIDTYPE) VALUES 
		(NID, VROWSTAMP ,VAPPLICATIONID, VREFID, VREFIDTYPE);

	IF SQL%ROWCOUNT = 0 THEN
		NID := NULL;
	END IF;

	RETURN NID;

END APPLICATIONPERMISSION;

PROCEDURE USERAPPLICATIONPERMISSION (VAPPLICATION IN VARCHAR2, VUSERLOGIN IN VARCHAR2 ) 
IS
LAPPLICATIONID VARCHAR2(10);
LUSERID VARCHAR2(10);
NID VARCHAR2(10);
BEGIN
	SELECT ID INTO LAPPLICATIONID FROM APPLICATIONS WHERE NAME = VAPPLICATION;
	SELECT ID INTO LUSERID FROM USERS WHERE USERLOGIN = VUSERLOGIN;
	NID := APPLICATIONPERMISSION(null,'AAAA',LAPPLICATIONID,LUSERID,'USER');
END USERAPPLICATIONPERMISSION;

PROCEDURE GROUPAPPLICATIONPERMISSION (VAPPLICATION IN VARCHAR2, VSECURITYGROUPNAME IN VARCHAR2 ) 
IS
LAPPLICATIONID VARCHAR2(10);
LSECURITYGROUPID VARCHAR2(10);
NID VARCHAR2(10);
BEGIN
	SELECT ID INTO LAPPLICATIONID FROM APPLICATIONS WHERE NAME = VAPPLICATION;
	SELECT ID INTO LSECURITYGROUPID FROM SECURITYGROUPS WHERE SECURITYGROUPNAME = VSECURITYGROUPNAME;
	NID := APPLICATIONPERMISSION(null,'AAAA',LAPPLICATIONID,LSECURITYGROUPID,'SECURITYGROUP');
END GROUPAPPLICATIONPERMISSION;

PROCEDURE ROLEAPPLICATIONPERMISSION (VAPPLICATION IN VARCHAR2, VOBJECTCLASS IN VARCHAR2, VUSERTYPE IN VARCHAR2, VCLASSIFICATION IN VARCHAR2) 
IS
LAPPLICATIONID VARCHAR2(10);
LROLEID VARCHAR2(10);
NID VARCHAR2(10);
BEGIN
	SELECT ID INTO LAPPLICATIONID FROM APPLICATIONS WHERE NAME = VAPPLICATION;
	SELECT ID INTO LROLEID FROM ROLES WHERE OBJECTCLASS = VOBJECTCLASS AND USERTYPE = VUSERTYPE AND CLASSIFICATION = VCLASSIFICATION;
	NID := APPLICATIONPERMISSION(null,'AAAA',LAPPLICATIONID,LROLEID,'ROLE');
END ROLEAPPLICATIONPERMISSION;

/* STILL NEEDS WORK */

FUNCTION PERMISSION(VID IN VARCHAR2, VROWSTAMP IN VARCHAR2, VAPPLICATIONPERMISSIONID IN VARCHAR2, VAPPLICATIONRIGHTID IN VARCHAR2, VPERMISSIONVALUE in VARCHAR2)
RETURN VARCHAR2 IS
NID VARCHAR2(10);
BEGIN

	IF VID IS NULL THEN
		SELECT PERMISSIONSEQ.NEXTVAL INTO NID FROM DUAL;
	ELSE 
		NID := VID;
	END IF;

	MERGE INTO PERMISSIONS A
	USING (SELECT ID FROM (SELECT ID FROM PERMISSIONS WHERE ID = NID UNION ALL SELECT NULL ID FROM DUAL) WHERE ROWNUM = 1) B
	ON (A.ID = B.ID)
	WHEN MATCHED THEN 
	UPDATE SET A.ROWSTAMP = VROWSTAMP, A.APPLICATIONPERMISSIONID = VAPPLICATIONPERMISSIONID, A.APPLICATIONRIGHTID = VAPPLICATIONRIGHTID, A.PERMISSIONVALUE = VPERMISSIONVALUE
	WHEN NOT MATCHED THEN
	INSERT (A.ID, A.ROWSTAMP, A.APPLICATIONPERMISSIONID, A.APPLICATIONRIGHTID, A.PERMISSIONVALUE) VALUES 
		(NID, VROWSTAMP, VAPPLICATIONPERMISSIONID, VAPPLICATIONRIGHTID,  VPERMISSIONVALUE);

	IF SQL%ROWCOUNT = 0 THEN
		NID := NULL;
	END IF;

	RETURN NID;

END PERMISSION;

PROCEDURE USERPERMISSION(VAPPLICATION IN VARCHAR2, VUSERLOGIN IN VARCHAR2, VRIGHT IN VARCHAR2, VPERMISSIONVALUE IN VARCHAR2) 
IS
LAPPLICATIONPERMISSIONID VARCHAR2(10);
LAPPLICATIONID VARCHAR2(10);
LAPPLICATIONRIGHTID VARCHAR2(10);
LUSERID VARCHAR2(10);
NID VARCHAR2(10);
BEGIN
	SELECT ID INTO LUSERID FROM USERS WHERE USERLOGIN = VUSERLOGIN;
	SELECT ID INTO LAPPLICATIONID FROM APPLICATIONS WHERE NAME = VAPPLICATION;
	SELECT ID INTO LAPPLICATIONPERMISSIONID FROM APPLICATIONPERMISSIONS WHERE APPLICATIONID = LAPPLICATIONID AND REFIDTYPE = 'USER' AND REFID = LUSERID;
	SELECT ID INTO LAPPLICATIONRIGHTID FROM APPLICATIONRIGHTS WHERE APPLICATIONID = LAPPLICATIONID AND RIGHT = VRIGHT;
	NID := PERMISSION(null /* VID */ , 'AAAA' /* VROWSTAMP */, LAPPLICATIONPERMISSIONID, LAPPLICATIONRIGHTID, VPERMISSIONVALUE);
END USERPERMISSION;

PROCEDURE GROUPPERMISSION(VAPPLICATION IN VARCHAR2, VSECURITYGROUPNAME IN VARCHAR2, VRIGHT IN VARCHAR2, VPERMISSIONVALUE IN VARCHAR2)
IS
LAPPLICATIONPERMISSIONID VARCHAR2(10);
LAPPLICATIONID VARCHAR2(10);
LAPPLICATIONRIGHTID VARCHAR2(10);
LSECURITYGROUPID VARCHAR2(10);
NID VARCHAR2(10);
BEGIN
	SELECT ID INTO LSECURITYGROUPID FROM SECURITYGROUPS WHERE SECURITYGROUPNAME = VSECURITYGROUPNAME;
	SELECT ID INTO LAPPLICATIONID FROM APPLICATIONS WHERE NAME = VAPPLICATION;
    SELECT ID INTO LAPPLICATIONPERMISSIONID FROM APPLICATIONPERMISSIONS WHERE APPLICATIONID = LAPPLICATIONID AND REFIDTYPE = 'SECURITYGROUP' AND REFID = LSECURITYGROUPID;
	SELECT ID INTO LAPPLICATIONRIGHTID FROM APPLICATIONRIGHTS WHERE APPLICATIONID = LAPPLICATIONID AND RIGHT = VRIGHT;	
	NID := PERMISSION(null /* VID */ , 'AAAA' /* VROWSTAMP */, LAPPLICATIONPERMISSIONID, LAPPLICATIONRIGHTID, VPERMISSIONVALUE);
END GROUPPERMISSION;

PROCEDURE ROLEPERMISSION(VAPPLICATION IN VARCHAR2, VOBJECTCLASS IN VARCHAR2, VUSERTYPE IN VARCHAR2, VCLASSIFICATION IN VARCHAR2, VRIGHT IN VARCHAR2, VPERMISSIONVALUE IN VARCHAR2)
IS
LROLEID VARCHAR2(10);
LAPPLICATIONPERMISSIONID VARCHAR2(10);
LAPPLICATIONID VARCHAR2(10);
LAPPLICATIONRIGHTID VARCHAR2(10);
NID VARCHAR2(10);
BEGIN
	SELECT ID INTO LROLEID FROM ROLES WHERE OBJECTCLASS = VOBJECTCLASS AND USERTYPE = VUSERTYPE AND CLASSIFICATION = VCLASSIFICATION;
	SELECT ID INTO LAPPLICATIONID FROM APPLICATIONS WHERE NAME = VAPPLICATION;
    SELECT ID INTO LAPPLICATIONPERMISSIONID FROM APPLICATIONPERMISSIONS WHERE APPLICATIONID = LAPPLICATIONID AND REFIDTYPE = 'ROLE' AND REFID = LROLEID;	
	SELECT ID INTO LAPPLICATIONRIGHTID FROM APPLICATIONRIGHTS WHERE APPLICATIONID = LAPPLICATIONID AND RIGHT = VRIGHT;
    NID := PERMISSION(null /* VID */ , 'AAAA' /* VROWSTAMP */, LAPPLICATIONPERMISSIONID, LAPPLICATIONRIGHTID, VPERMISSIONVALUE);
END ROLEPERMISSION;

PROCEDURE RESETAPPLICATIONSECURITY(VAPPLICATIONNAME IN VARCHAR2) IS
LAPPLICATIONID VARCHAR2(10);
BEGIN
	SELECT ID INTO LAPPLICATIONID FROM APPLICATIONS WHERE NAME = VAPPLICATIONNAME;
	DELETE FROM PERMISSIONS 
		WHERE APPLICATIONPERMISSIONID IN (SELECT ID FROM APPLICATIONPERMISSIONS WHERE APPLICATIONID = LAPPLICATIONID) OR
		APPLICATIONRIGHTID IN (SELECT ID FROM APPLICATIONRIGHTS WHERE APPLICATIONID = LAPPLICATIONID);
	DELETE FROM APPLICATIONPERMISSIONS WHERE APPLICATIONID = LAPPLICATIONID;
	DELETE FROM APPLICATIONRIGHTS WHERE APPLICATIONID = LAPPLICATIONID;
END RESETAPPLICATIONSECURITY;

FUNCTION GETPERMISSIONVALUE(VUSERID IN VARCHAR2, VAPPLICATION IN VARCHAR2, VRIGHT IN VARCHAR2)
RETURN NUMBER
IS 
	CHECKVALUE NUMBER(1);
BEGIN
	
	SELECT 
		MAX(PERMISSIONCODE) INTO CHECKVALUE 
	FROM COREPERMISSIONS WHERE APPLICATIONNAME = VAPPLICATION AND USERID = VUSERID AND RIGHT = VRIGHT;
	
	IF CHECKVALUE IS  NULL THEN 
		CHECKVALUE := 0;
	END IF;
	
	RETURN CHECKVALUE;
	
	EXCEPTION
   			WHEN NO_DATA_FOUND THEN RETURN 0;

END GETPERMISSIONVALUE;

/*
 *       WE USE SOME QUATERNARY LOGIC HERE - 
 *
 *       ALWAYSALLOW - ALLOW REGARDLESS OF ALL OTHER VALUES
 *       ALWAYSDENY - DENY REGARDLESS OF ALL OTHER VALUES UNLESS ALWAYSALLOW.
 *       ALLOW - ALLOW ACCESS UNLESS OTHERWISE ALWAYSDENIED
 *       DENY - DENY ACCESS UNLESS OTHER ROWS ALLOW.
 */

FUNCTION CANDO(VUSERID IN VARCHAR2, VAPPLICATION IN VARCHAR2, VRIGHT IN VARCHAR2)
RETURN NUMBER
IS 
	CHECKVALUE NUMBER(1);
BEGIN
	
	SELECT GETPERMISSIONVALUE(VUSERID, VAPPLICATION, VRIGHT) INTO CHECKVALUE FROM DUAL;
	
	IF CHECKVALUE = 1 or CHECKVALUE = 3 THEN 
		RETURN 1;
	ELSE
		RETURN 0;
	END IF;
	
	EXCEPTION WHEN NO_DATA_FOUND THEN RETURN 0;

END CANDO;

END SECURITY;
/

sho err
