
/* REFIDTYPE MUST BE USER OR SECURITYGROUP OR ROLE */

CREATE SEQUENCE APPLICATIONPERMISSIONSEQ;

/* Not enforcing that refid is actually in the table */

CREATE TABLE APPLICATIONPERMISSIONS (
	ID VARCHAR2(10) NOT NULL,
	ROWSTAMP VARCHAR2(10) NOT NULL,
	APPLICATIONID VARCHAR2(10) NOT NULL,
	REFID VARCHAR2(10) NOT NULL,
	REFIDTYPE VARCHAR2(20) NOT NULL,
	MODIFIED TIMESTAMP NOT NULL, 
	PRIMARY KEY (ID),
	CONSTRAINT APPLICATIONPERMISSIONS_U UNIQUE (APPLICATIONID, REFID, REFIDTYPE),
	CONSTRAINT APPLICATIONPERMISSIONS_FK1 FOREIGN KEY (APPLICATIONID) REFERENCES APPLICATIONS (ID),
	CONSTRAINT APPLICATIONPERMISSIONS_CK1 CHECK (REFIDTYPE IN ('USER', 'SECURITYGROUP', 'ROLE'))
);

ALTER TABLE APPLICATIONPERMISSIONS INMEMORY;

CREATE OR REPLACE TRIGGER APPLICATIONPERMISSIONS_T 
BEFORE INSERT OR UPDATE ON APPLICATIONPERMISSIONS
FOR EACH ROW
DECLARE 
	OBJECTMODIFICATION EXCEPTION;
BEGIN
	IF UPDATING AND NOT :NEW.ROWSTAMP = :OLD.ROWSTAMP THEN
		RAISE OBJECTMODIFICATION;
	END IF;

	:NEW.MODIFIED := SYSTIMESTAMP;

        SELECT DBMS_RANDOM.STRING('U',10) INTO :NEW.ROWSTAMP FROM DUAL;
	EXCEPTION 
	   WHEN OBJECTMODIFICATION THEN
		RAISE_APPLICATION_ERROR(-20100,'Record has been modified by another user');
END;
/

CREATE MATERIALIZED VIEW LOG ON APPLICATIONPERMISSIONS WITH ROWID, SEQUENCE(APPLICATIONID, REFID, REFIDTYPE), PRIMARY KEY INCLUDING NEW VALUES;
ALTER MATERIALIZED VIEW LOG FORCE ON APPLICATIONPERMISSIONS ADD ROWID;

CREATE INDEX APPLICATIONPERMISSIONS_NDX1 ON APPLICATIONPERMISSIONS (REFID, REFIDTYPE);
CREATE INDEX APPLICATIONPERMISSIONS_NDX2 ON APPLICATIONPERMISSIONS (APPLICATIONID);
