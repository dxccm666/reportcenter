/* 
	PERMISSIONS

	ASSIGNS SECURITY PERMISSIONS.
	PERMISSIONS ARE ADDITIVE.

	PK FROM RIGHTSEQ
*/
CREATE SEQUENCE PERMISSIONSEQ;

CREATE TABLE PERMISSIONS (
	ID VARCHAR2(10) NOT NULL,
	ROWSTAMP VARCHAR2(10) NOT NULL,
	APPLICATIONPERMISSIONID VARCHAR2(10) NOT NULL,
	APPLICATIONRIGHTID VARCHAR2(10) NOT NULL,
	PERMISSIONVALUE VARCHAR2(20) NOT NULL,
	PRIMARY KEY (ID),
	CONSTRAINT PERMISSIONS_U UNIQUE (APPLICATIONPERMISSIONID, APPLICATIONRIGHTID),
	CONSTRAINT PERMISSIONS_FK1 FOREIGN KEY (APPLICATIONPERMISSIONID) REFERENCES APPLICATIONPERMISSIONS (ID),
	CONSTRAINT PERMISSIONS_FK2 FOREIGN KEY (APPLICATIONRIGHTID) REFERENCES APPLICATIONRIGHTS (ID),
	CONSTRAINT PERMISSIONS_CK1 CHECK (PERMISSIONVALUE IN ('DENY','ALLOW','ALWAYSDENY','ALWAYSALLOW'))
);

ALTER TABLE PERMISSIONS INMEMORY;

CREATE OR REPLACE TRIGGER PERMISSIONS_T 
BEFORE INSERT OR UPDATE ON PERMISSIONS
FOR EACH ROW
DECLARE 
	OBJECTMODIFICATION EXCEPTION;
BEGIN
	IF UPDATING AND NOT :NEW.ROWSTAMP = :OLD.ROWSTAMP THEN
		RAISE OBJECTMODIFICATION;
	END IF;
	SELECT DBMS_RANDOM.STRING('U',10) INTO :NEW.ROWSTAMP FROM DUAL;
	EXCEPTION 
	   WHEN OBJECTMODIFICATION THEN
		RAISE_APPLICATION_ERROR(-20100,'Record has been modified by another user');
END;
/

CREATE INDEX PERMISSIONS_NDX1 ON PERMISSIONS (APPLICATIONPERMISSIONID);

CREATE MATERIALIZED VIEW LOG ON PERMISSIONS WITH ROWID, SEQUENCE(APPLICATIONPERMISSIONID, APPLICATIONRIGHTID, PERMISSIONVALUE), PRIMARY KEY INCLUDING NEW VALUES;
ALTER MATERIALIZED VIEW LOG FORCE ON PERMISSIONS ADD ROWID;


