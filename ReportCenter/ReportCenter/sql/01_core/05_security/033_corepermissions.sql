/*
 * 
 * This creates a view that supports security group and user based security.  
 * 
 * This view does not support role based security, since roles are based on participantpersons not users.
 * 
 * see 99_permissions_details.sql in 04_postinstall_data for role based view that enhances this one.
 * 
 */

CREATE MATERIALIZED VIEW COREPERMISSIONS 
TABLESPACE PROJEXMVIEWS
PARALLEL BUILD IMMEDIATE
REFRESH FORCE ON DEMAND
AS
SELECT APPLICATIONNAME, RIGHT, PERMISSIONVALUE, PERMISSIONCODE, SECURITYFROM, USERID, OBJECTID
FROM (
	SELECT 
       		A.APPLICATIONNAME,
		A.RIGHT, 
		A.PERMISSIONVALUE, 
		DECODE(A.PERMISSIONVALUE, 'DENY',0,'ALLOW',1,'ALWAYSDENY',2,'ALWAYSALLOW',3,-1) AS PERMISSIONCODE,
		S.SECURITYGROUPNAME AS SECURITYFROM, 
		U.USERID AS USERID, 
		'ALL' AS OBJECTID
	FROM PERMISSIONSMVIEW A 
   	INNER JOIN SECURITYGROUPS S ON S.ID = A.REFID  
   	INNER JOIN SECURITYGROUPUSERS U ON U.SECURITYGROUPID = S.ID
    	INNER JOIN USERS T ON T.ID = U.USERID AND T.ISACTIVE = 1
    	WHERE A.REFIDTYPE = 'SECURITYGROUP'
) UNION ALL (
	SELECT 
		A.APPLICATIONNAME, 
		A.RIGHT, 
		A.PERMISSIONVALUE, 
		DECODE(A.PERMISSIONVALUE, 'DENY',0,'ALLOW',1,'ALWAYSDENY',2,'ALWAYSALLOW',3,-1) AS PERMISSIONCODE,
		'USER' AS SECURITYFROM, 
		A.REFID AS USERID, 
		'ALL' AS OBJECTID
	FROM PERMISSIONSMVIEW A
	INNER JOIN USERS U ON U.ID = A.REFID AND U.ISACTIVE = 1
	WHERE A.REFIDTYPE = 'USER' 
);

ALTER TABLE COREPERMISSIONS NOLOGGING INMEMORY;

CREATE INDEX COREPERMISSIONS_IDX ON COREPERMISSIONS (APPLICATIONNAME, USERID, RIGHT);
