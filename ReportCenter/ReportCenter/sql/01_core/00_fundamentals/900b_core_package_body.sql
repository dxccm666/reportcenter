CREATE OR REPLACE PACKAGE BODY CORE AS

FUNCTION CAMPUS(VID IN VARCHAR2, VROWSTAMP IN VARCHAR2, VCAMPUS IN VARCHAR2, VDESCRIPTION IN VARCHAR2, VISACTIVE IN NUMBER)
RETURN VARCHAR2 IS
NID VARCHAR2(10);
BEGIN
	IF VID IS NULL THEN
		SELECT CAMPUSSEQ.NEXTVAL INTO NID FROM DUAL;
	ELSE 
		NID := VID;
	END IF;

	MERGE INTO CAMPUSES A
	USING (SELECT ID FROM (SELECT ID FROM CAMPUSES WHERE ID = NID UNION ALL SELECT NULL ID FROM DUAL) WHERE ROWNUM = 1) B
	ON (A.ID = B.ID)
	WHEN MATCHED THEN 
	UPDATE SET A.ROWSTAMP = VROWSTAMP, A.CAMPUS = VCAMPUS, A.DESCRIPTION = VDESCRIPTION, A.ISACTIVE = VISACTIVE
	WHEN NOT MATCHED THEN
	INSERT (A.ID, A.ROWSTAMP, A.CAMPUS, A.DESCRIPTION, A.ISACTIVE) VALUES 
		(NID, VROWSTAMP, VCAMPUS, VDESCRIPTION, VISACTIVE);

	IF SQL%ROWCOUNT = 0 THEN
		NID := NULL;
	END IF;

	RETURN NID;
	
END CAMPUS;

PROCEDURE CAMPUS (VCAMPUS IN VARCHAR2, VDESCRIPTION IN VARCHAR2, VISACTIVE IN NUMBER) IS
NID VARCHAR2(10);
BEGIN
	NID := CAMPUS(null, 'AAAA', VCAMPUS, VDESCRIPTION, VISACTIVE);
END CAMPUS; 

FUNCTION LIST (VID IN VARCHAR2, VROWSTAMP IN VARCHAR2, VLISTNAME IN VARCHAR2, VDESCRIPTION IN VARCHAR2, VHELPTEXT IN VARCHAR2, VISACTIVE IN NUMBER, VISSYSTEM IN NUMBER) RETURN VARCHAR2 IS
NID VARCHAR2(10);
BEGIN
	IF VID IS NULL THEN 
		SELECT LISTSEQ.NEXTVAL INTO NID FROM DUAL;
	ELSE
		NID := VID;
	END IF;

	MERGE INTO LISTS A
	USING (SELECT ID FROM (SELECT ID FROM LISTS WHERE ID = NID UNION ALL SELECT NULL ID FROM DUAL) WHERE ROWNUM = 1) B
	ON (A.ID = B.ID) 
	WHEN MATCHED THEN
	UPDATE SET A.ROWSTAMP=VROWSTAMP, A.LISTNAME=VLISTNAME, A.DESCRIPTION=VDESCRIPTION, A.HELPTEXT=VHELPTEXT, A.ISACTIVE=VISACTIVE, A.ISSYSTEM=VISSYSTEM
	WHEN NOT MATCHED THEN
	INSERT (A.ID, A.ROWSTAMP, A.LISTNAME, A.DESCRIPTION, A.HELPTEXT, A.ISACTIVE, A.ISSYSTEM) VALUES 
		(NID, VROWSTAMP, VLISTNAME, VDESCRIPTION, VHELPTEXT, VISACTIVE, VISSYSTEM);

	IF SQL%ROWCOUNT = 0 THEN
		NID := NULL;
	END IF;

	RETURN NID;

END LIST;

PROCEDURE LIST (VLISTNAME IN VARCHAR2, VDESCRIPTION IN VARCHAR2, VHELPTEXT IN VARCHAR2, VISACTIVE IN NUMBER, VISSYSTEM IN NUMBER) IS
NID VARCHAR2(10);
BEGIN
	NID := LIST(null, 'AAAA', VLISTNAME, VDESCRIPTION, VHELPTEXT, VISACTIVE, VISSYSTEM);
END LIST;

FUNCTION LISTITEM(VID IN VARCHAR2, VROWSTAMP IN VARCHAR2, VLISTID IN VARCHAR2, VISALLCAMPUS IN NUMBER, VDISPLAYORDER IN NUMBER, VSYSTEMVALUE IN VARCHAR2, VVALUE IN VARCHAR2, VISDEFAULT IN NUMBER, VDESCRIPTION IN VARCHAR2) RETURN VARCHAR2 IS
NID VARCHAR2(10);
BEGIN
	IF VID IS NULL THEN 
		SELECT LISTITEMSEQ.NEXTVAL INTO NID FROM DUAL;
	ELSE
		NID := VID;
	END IF;

	MERGE INTO LISTITEMS A
	USING (SELECT ID FROM (SELECT ID FROM LISTITEMS WHERE ID = NID UNION ALL SELECT NULL ID FROM DUAL) WHERE ROWNUM = 1) B
	ON (A.ID = B.ID) 
	WHEN MATCHED THEN
	UPDATE SET A.ROWSTAMP=VROWSTAMP, A.LISTID = VLISTID, A.ISALLCAMPUS=VISALLCAMPUS, A.DISPLAYORDER=VDISPLAYORDER, A.SYSTEMVALUE = VSYSTEMVALUE, A.VALUE = VVALUE, A.ISDEFAULT=VISDEFAULT, A.DESCRIPTION=VDESCRIPTION
	WHEN NOT MATCHED THEN
	INSERT (A.ID, A.ROWSTAMP, A.LISTID,  A.ISALLCAMPUS, A.DISPLAYORDER, A.SYSTEMVALUE, A.VALUE, A.ISDEFAULT, A.DESCRIPTION) VALUES
		(NID, VROWSTAMP, VLISTID, VISALLCAMPUS, VDISPLAYORDER, VSYSTEMVALUE, VVALUE, VISDEFAULT, VDESCRIPTION);

	IF SQL%ROWCOUNT = 0 THEN
		NID := NULL;
	END IF;

	RETURN NID;

END LISTITEM;

FUNCTION CAMPUSLISTITEM (VID IN VARCHAR2, VROWSTAMP IN VARCHAR2, VCAMPUSID IN VARCHAR2, VLISTITEMID IN VARCHAR2, VISDEFAULT IN NUMBER) RETURN VARCHAR2 IS
NID VARCHAR2(10);
BEGIN
	IF VID IS NULL THEN 
		SELECT CAMPUSLISTITEMSEQ.NEXTVAL INTO NID FROM DUAL;
	ELSE
		NID := VID;
	END IF;

	MERGE INTO CAMPUSLISTITEMS A
	USING (SELECT ID FROM (SELECT ID FROM CAMPUSLISTITEMS WHERE ID = NID UNION ALL SELECT NULL ID FROM DUAL) WHERE ROWNUM = 1) B
	ON (A.ID = B.ID) 
	WHEN MATCHED THEN
	UPDATE SET A.ROWSTAMP=VROWSTAMP, A.CAMPUSID = VCAMPUSID, A.LISTITEMID = VLISTITEMID, A.ISDEFAULT = VISDEFAULT 
	WHEN NOT MATCHED THEN
	INSERT (A.ID, A.ROWSTAMP, A.CAMPUSID, A.LISTITEMID, A.ISDEFAULT) VALUES
		(NID, VROWSTAMP, VCAMPUSID, VLISTITEMID, VISDEFAULT);

	IF SQL%ROWCOUNT = 0 THEN
		NID := NULL;
	END IF;

	RETURN NID;

END CAMPUSLISTITEM;


PROCEDURE LISTITEM (VLISTNAME IN VARCHAR2, VCAMPUS IN VARCHAR2, VISALLCAMPUS IN NUMBER, VDISPLAYORDER IN NUMBER, VSYSTEMVALUE IN VARCHAR2, VVALUE IN VARCHAR2, VISDEFAULT IN NUMBER, VDESCRIPTION IN VARCHAR2) IS
NID VARCHAR2(10);
NID2 VARCHAR2(10);
LLISTID VARCHAR2(10);
LCAMPUSID VARCHAR2(10);
BEGIN
	
	SELECT ID INTO LLISTID FROM LISTS WHERE LISTNAME = VLISTNAME;
	
	IF VISALLCAMPUS = 1 THEN 
		NID := LISTITEM (null, 'AAAA', LLISTID, VISALLCAMPUS, VDISPLAYORDER, VSYSTEMVALUE, VVALUE, VISDEFAULT, VDESCRIPTION);
	ELSE
	
		NID := LISTITEM (null, 'AAAA', LLISTID, 0, VDISPLAYORDER, VSYSTEMVALUE, VVALUE, 0, VDESCRIPTION);
		SELECT ID INTO LCAMPUSID FROM CAMPUSES WHERE CAMPUS = VCAMPUS;
		NID2 := CAMPUSLISTITEM(null, 'AAAA', LCAMPUSID, NID, VISDEFAULT);
		
	END IF;
	
END LISTITEM;


FUNCTION APPLICATION (VID IN VARCHAR2, VROWSTAMP IN VARCHAR2, VNAME IN VARCHAR2, 
	VDESCRIPTION IN VARCHAR2, VISACTIVE IN NUMBER) RETURN VARCHAR2 IS
NID VARCHAR2(10);
BEGIN
	IF VID IS NULL THEN
		SELECT APPLICATIONSEQ.NEXTVAL INTO NID FROM DUAL;
	ELSE 
		NID := VID;
	END IF;

	MERGE INTO APPLICATIONS A
	USING (SELECT ID FROM (SELECT ID FROM APPLICATIONS WHERE ID = NID UNION ALL SELECT NULL ID FROM DUAL) WHERE ROWNUM = 1) B
	ON (A.ID = B.ID)
	WHEN MATCHED THEN 
	UPDATE SET A.ROWSTAMP = VROWSTAMP, A.NAME =  VNAME, A.DESCRIPTION = VDESCRIPTION, A.ISACTIVE = VISACTIVE 
	WHEN NOT MATCHED THEN
	INSERT (A.ID, A.ROWSTAMP, A.NAME, A.DESCRIPTION, A.ISACTIVE ) VALUES
		(NID, VROWSTAMP, VNAME, VDESCRIPTION, VISACTIVE );

	IF SQL%ROWCOUNT = 0 THEN
		NID := NULL;
	END IF;

	RETURN NID;
	
END APPLICATION;

PROCEDURE APPLICATION (VNAME IN VARCHAR2, VDESCRIPTION in VARCHAR2) IS
NID VARCHAR2(10);
BEGIN
	NID := APPLICATION(null, 'AAAA', VNAME, VDESCRIPTION, 1); 
END APPLICATION;

FUNCTION AUTHPROVIDER(VID IN VARCHAR2, VROWSTAMP IN VARCHAR2, VNAME IN VARCHAR2, VURL IN VARCHAR2, VICON IN VARCHAR2, VDISPLAYORDER IN NUMBER,
	VAUTHMETHOD IN VARCHAR2, VISACTIVE IN NUMBER, VREQUIRESNAME IN NUMBER, VREQUIRESPASSWORD IN NUMBER, VAUTHKEY IN VARCHAR2, VAUTHSECRET IN VARCHAR2)
RETURN VARCHAR2 IS
NID VARCHAR2(10);
BEGIN
	IF VID IS NULL THEN
		SELECT AUTHPROVIDERSEQ.NEXTVAL INTO NID FROM DUAL;
	ELSE 
		NID := VID;
	END IF;

	MERGE INTO AUTHPROVIDERS A
	USING (SELECT ID FROM (SELECT ID FROM AUTHPROVIDERS WHERE ID = NID UNION ALL SELECT NULL ID FROM DUAL) WHERE ROWNUM = 1) B
	ON (A.ID = B.ID)
	WHEN MATCHED THEN 
	UPDATE SET A.ROWSTAMP = VROWSTAMP, A.NAME = VNAME, A.URL = VURL, A.ICON = VICON, A.DISPLAYORDER = VDISPLAYORDER, A.AUTHMETHOD = VAUTHMETHOD, A.ISACTIVE = VISACTIVE,
		A.REQUIRESNAME = VREQUIRESNAME, A.REQUIRESPASSWORD = VREQUIRESPASSWORD, A.AUTHKEY = VAUTHKEY, A.AUTHSECRET = VAUTHSECRET
	WHEN NOT MATCHED THEN
	INSERT (A.ID, A.ROWSTAMP, A.NAME, A.URL, A.ICON, A.DISPLAYORDER, A.AUTHMETHOD, A.ISACTIVE, A.REQUIRESNAME, A.REQUIRESPASSWORD, A.AUTHKEY, A.AUTHSECRET) VALUES 
		(NID, VROWSTAMP, VNAME, VURL, VICON, VDISPLAYORDER, VAUTHMETHOD, VISACTIVE, VREQUIRESNAME, VREQUIRESPASSWORD, VAUTHKEY, VAUTHSECRET);

	IF SQL%ROWCOUNT = 0 THEN
		NID := NULL;
	END IF;

	RETURN NID;
	
END AUTHPROVIDER;

PROCEDURE AUTHPROVIDER (VNAME IN VARCHAR2, VURL IN VARCHAR2, VICON IN VARCHAR2, VDISPLAYORDER IN NUMBER, VAUTHMETHOD IN VARCHAR2, VISACTIVE IN NUMBER, VREQUIRESNAME IN NUMBER, VREQUIRESPASSWORD IN NUMBER, VAUTHKEY IN VARCHAR2, VAUTHSECRET IN VARCHAR2) IS
NID VARCHAR2(10);
BEGIN
	NID := AUTHPROVIDER (null, 'AAAA', VNAME, VURL, VICON, VDISPLAYORDER, VAUTHMETHOD, VISACTIVE, VREQUIRESNAME, VREQUIRESPASSWORD, VAUTHKEY, VAUTHSECRET);
END AUTHPROVIDER;


FUNCTION LOGGER ( VID IN VARCHAR2, VROWSTAMP IN VARCHAR2, VLOGGERNAME IN VARCHAR2, VDESCRIPTION IN VARCHAR2, VISACTIVE IN NUMBER, VLOGGERLEVEL IN VARCHAR2) RETURN VARCHAR2 IS
NID VARCHAR2(10);
BEGIN
	IF VID IS NULL THEN
		SELECT LOGGERSEQ.NEXTVAL INTO NID FROM DUAL;
	ELSE 
		NID := VID;
	END IF;

	MERGE INTO LOGGERS A
	USING (SELECT ID FROM (SELECT ID FROM LOGGERS WHERE ID = NID UNION ALL SELECT NULL ID FROM DUAL) WHERE ROWNUM = 1) B
	ON (A.ID = B.ID)
	WHEN MATCHED THEN 
	UPDATE SET A.ROWSTAMP = VROWSTAMP, A.LOGGERNAME = VLOGGERNAME, A.DESCRIPTION = VDESCRIPTION, A.ISACTIVE = VISACTIVE, A.LOGGERLEVEL = VLOGGERLEVEL
	WHEN NOT MATCHED THEN
	INSERT (A.ID, A.ROWSTAMP, A.LOGGERNAME, A.DESCRIPTION, A.ISACTIVE, A.LOGGERLEVEL) VALUES 
		(NID, VROWSTAMP, VLOGGERNAME, VDESCRIPTION, VISACTIVE, VLOGGERLEVEL);

	IF SQL%ROWCOUNT = 0 THEN
		NID := NULL;
	END IF;

	RETURN NID;
END LOGGER;

FUNCTION USER(VID IN VARCHAR2, VROWSTAMP IN VARCHAR2, VUSERLOGIN IN VARCHAR2, 
	VPERSONID IN VARCHAR2, VINVITATIONCODE IN VARCHAR2, VINVITATIONEMAIL IN VARCHAR2,
	VINVITED IN TIMESTAMP, VINVITATIONEMAILED IN TIMESTAMP, VINITIALIZED IN NUMBER, VPASSWORD IN VARCHAR2,
	VPASSWORDEXPIRATION IN TIMESTAMP, VFORCEEXPIRATION IN NUMBER, VUSERTYPE IN VARCHAR2, VREGISTRATIONMETHOD IN VARCHAR2,
	VISACTIVE IN NUMBER, VSECRETKEY IN VARCHAR2, VSALT IN VARCHAR2,VEMAILSCHEDULE IN VARCHAR2, VNOTIFYBYEMAIL IN NUMBER, VVERIFIER IN VARCHAR2) RETURN VARCHAR2
IS
NID VARCHAR2(10);
BEGIN
		
		/* SECRETKEY IS SET BY TRIGGER */
	
        IF VID IS NULL THEN 
                SELECT USERSEQ.NEXTVAL INTO NID FROM DUAL;
        ELSE
                NID := VID;
        END IF;

        MERGE INTO USERS A
        USING (SELECT ID FROM (SELECT ID FROM USERS WHERE ID = NID UNION ALL SELECT NULL ID FROM DUAL) WHERE ROWNUM = 1) B
        ON (A.ID = B.ID)
        WHEN MATCHED THEN 
        UPDATE SET A.ROWSTAMP=VROWSTAMP, A.USERLOGIN = VUSERLOGIN, A.PERSONID = VPERSONID,
		A.INVITATIONCODE = VINVITATIONCODE, A.INVITATIONEMAIL = VINVITATIONEMAIL, A.INVITED = VINVITED,
		A.INVITATIONEMAILED = VINVITATIONEMAILED, A.INITIALIZED =VINITIALIZED, 
		A.PASSWORD = VPASSWORD, A.PASSWORDEXPIRATION = VPASSWORDEXPIRATION, A.FORCEEXPIRATION = VFORCEEXPIRATION,
		A.USERTYPE = VUSERTYPE, A.REGISTRATIONMETHOD = VREGISTRATIONMETHOD, A.ISACTIVE = VISACTIVE, A.SECRETKEY = VSECRETKEY,
		A.SALT = VSALT, A.EMAILSCHEDULE = VEMAILSCHEDULE, A.NOTIFYBYEMAIL = VNOTIFYBYEMAIL, A.VERIFIER = VVERIFIER
        WHEN NOT MATCHED THEN
        INSERT (A.ID, A.ROWSTAMP, A.USERLOGIN, A.PERSONID, A.INVITATIONCODE, A.INVITATIONEMAIL,A.INVITED, A.INVITATIONEMAILED, 
		A.INITIALIZED, A.PASSWORD, A.PASSWORDEXPIRATION, A.FORCEEXPIRATION, A.USERTYPE, A.REGISTRATIONMETHOD, A.ISACTIVE, A.SECRETKEY,
		A.SALT,A.EMAILSCHEDULE,A.NOTIFYBYEMAIL,A.VERIFIER) VALUES
                (NID, VROWSTAMP, VUSERLOGIN, VPERSONID, VINVITATIONCODE, VINVITATIONEMAIL, VINVITED, VINVITATIONEMAILED, VINITIALIZED,
		VPASSWORD, VPASSWORDEXPIRATION, VFORCEEXPIRATION, VUSERTYPE, VREGISTRATIONMETHOD, VISACTIVE, VSALT,VSECRETKEY, VEMAILSCHEDULE,VNOTIFYBYEMAIL,VVERIFIER);

        IF SQL%ROWCOUNT = 0 THEN
                NID := NULL;
        END IF;

        RETURN NID;

	EXCEPTION WHEN OTHERS THEN 
		RETURN NID;


END USER;

FUNCTION USERLOGINHISTORY(VID IN VARCHAR2, VUSERID IN VARCHAR2, VLOGGEDIN IN TIMESTAMP, VIPADDRESS IN VARCHAR2) RETURN VARCHAR2 IS
NID VARCHAR2(10);
BEGIN

	SELECT USERLOGINHISTORYSEQ.NEXTVAL INTO NID FROM DUAL;

	INSERT INTO USERLOGINHISTORY VALUES (NID, VUSERID, VLOGGEDIN, VIPADDRESS);

	RETURN NID;

END USERLOGINHISTORY;

FUNCTION CAMPUSUSER( VID IN VARCHAR2, VROWSTAMP IN VARCHAR2, VCAMPUSID IN VARCHAR2, VUSERID IN VARCHAR2) RETURN VARCHAR2 IS
NID VARCHAR2(10);
BEGIN
	
		
        IF VID IS NULL THEN 
                SELECT CAMPUSUSERSEQ.NEXTVAL INTO NID FROM DUAL;
        ELSE
                NID := VID;
        END IF;
        
		IF VCAMPUSID IS NULL OR VUSERID IS NULL THEN
			RETURN NID;
		END IF;
        
       	MERGE INTO CAMPUSUSERS A
        USING (SELECT ID FROM (SELECT ID FROM CAMPUSUSERS WHERE ID = NID UNION ALL SELECT NULL ID FROM DUAL) WHERE ROWNUM = 1) B
        ON (A.ID = B.ID)
        WHEN MATCHED THEN        
		UPDATE SET A.ROWSTAMP = VROWSTAMP, A.CAMPUSID = VCAMPUSID, A.USERID = VUSERID
		WHEN NOT MATCHED THEN
		INSERT (A.ID, A.ROWSTAMP, A.CAMPUSID, A.USERID) VALUES 
			(NID, VROWSTAMP, VCAMPUSID, VUSERID);
			
        IF SQL%ROWCOUNT = 0 THEN
                NID := NULL;
        END IF;
        
        RETURN NID;
        
        EXCEPTION 
        	WHEN OTHERS THEN 
        		RETURN NID;
        
END CAMPUSUSER;

PROCEDURE CAMPUSUSER(VCAMPUS IN VARCHAR2, VUSERLOGIN IN VARCHAR2) IS
LCAMPUSID VARCHAR2(10);
LUSERID VARCHAR2(10);
NID VARCHAR2(10);
BEGIN
	SELECT ID INTO LUSERID FROM USERS WHERE USERLOGIN = VUSERLOGIN;
	SELECT ID INTO LCAMPUSID FROM CAMPUSES WHERE CAMPUS = VCAMPUS;
	NID := CAMPUSUSER(null,'AAAA',LCAMPUSID, LUSERID);	
END CAMPUSUSER;

PROCEDURE USER(VUSERLOGIN IN VARCHAR2, VINVITATIONCODE IN VARCHAR2, VINVITATIONEMAIL IN VARCHAR2, VINVITED IN TIMESTAMP, VINITIALIZED IN NUMBER, 
VPASSWORD IN VARCHAR2, VPASSWORDEXPIRATION IN TIMESTAMP, VFORCEEXPIRATION IN NUMBER, VUSERTYPE IN VARCHAR2, VREGISTRATIONMETHOD IN VARCHAR2, VISACTIVE IN NUMBER, 
VSALT IN VARCHAR2,VEMAILSCHEDULE IN VARCHAR2, VNOTIFYBYEMAIL IN NUMBER, VVERIFIER IN VARCHAR2) IS
NID VARCHAR2(10);
BEGIN
	NID := USER(null, 'AAAA', VUSERLOGIN, null, VINVITATIONCODE, VINVITATIONEMAIL, VINVITED, null, VINITIALIZED, VPASSWORD, VPASSWORDEXPIRATION, VFORCEEXPIRATION, VUSERTYPE, 
	VREGISTRATIONMETHOD, VISACTIVE, null, VSALT, null, VNOTIFYBYEMAIL, VVERIFIER); 
END USER;

FUNCTION CRONTASK (VID IN VARCHAR2, VROWSTAMP IN VARCHAR2, VJAVACLASS IN VARCHAR2, VDESCRIPTION IN VARCHAR2, VCRONEXPRESSION IN VARCHAR2, VISACTIVE IN NUMBER) RETURN VARCHAR2
IS
NID VARCHAR2(10);
BEGIN
        IF VID IS NULL THEN 
                SELECT CRONTASKSEQ.NEXTVAL INTO NID FROM DUAL;
        ELSE
                NID := VID;
        END IF;
        
       	MERGE INTO CRONTASKS A
        USING (SELECT ID FROM (SELECT ID FROM CRONTASKS WHERE ID = NID UNION ALL SELECT NULL ID FROM DUAL) WHERE ROWNUM = 1) B
        ON (A.ID = B.ID)
        WHEN MATCHED THEN        
		UPDATE SET A.ROWSTAMP = VROWSTAMP, A.JAVACLASS = VJAVACLASS, A.DESCRIPTION = VDESCRIPTION, A.CRONEXPRESSION = VCRONEXPRESSION, A.ISACTIVE = VISACTIVE
		WHEN NOT MATCHED THEN
		INSERT (A.ID, A.ROWSTAMP, A.JAVACLASS, A.DESCRIPTION, A.CRONEXPRESSION, A.ISACTIVE) VALUES 
			(NID, VROWSTAMP, VJAVACLASS, VDESCRIPTION, VCRONEXPRESSION, VISACTIVE);
			
        IF SQL%ROWCOUNT = 0 THEN
                NID := NULL;
        END IF;

        RETURN NID;
END CRONTASK;

PROCEDURE CRONTASK(VJAVACLASS IN VARCHAR2, VDESCRIPTION IN VARCHAR2, VCRONEXPRESSION IN VARCHAR2, VISACTIVE IN NUMBER) IS
NID VARCHAR2(10);
BEGIN
		NID := CRONTASK(null,'AAAA', VJAVACLASS, VDESCRIPTION, VCRONEXPRESSION, VISACTIVE);
END CRONTASK;	

FUNCTION CRONTASKRUN(VID IN VARCHAR2, VJAVACLASS IN VARCHAR2, VSERVER IN VARCHAR2, VRUNSTART IN TIMESTAMP, VRUNEND IN TIMESTAMP, VSTATUS IN VARCHAR2, VERROR IN VARCHAR2) RETURN VARCHAR2 IS
NID VARCHAR2(10);
BEGIN

        IF VID IS NULL THEN 
                SELECT CRONTASKRUNSEQ.NEXTVAL INTO NID FROM DUAL;
        ELSE
                NID := VID;
        END IF;
        
       	MERGE INTO CRONTASKRUNS A
        USING (SELECT ID FROM (SELECT ID FROM CRONTASKRUNS WHERE ID = NID UNION ALL SELECT NULL ID FROM DUAL) WHERE ROWNUM = 1) B
        ON (A.ID = B.ID)
        WHEN MATCHED THEN        
		UPDATE SET A.JAVACLASS = VJAVACLASS, A.SERVER = VSERVER, A.RUNSTART = VRUNSTART, A.RUNEND = VRUNEND, A.STATUS = VSTATUS, A.ERROR = VERROR
		WHEN NOT MATCHED THEN
		INSERT (A.ID, A.JAVACLASS, A.SERVER, A.RUNSTART, A.RUNEND, A.STATUS, A.ERROR) VALUES 
			(NID, VJAVACLASS, VSERVER, VRUNSTART, VRUNEND, VSTATUS, VERROR);
			
        IF SQL%ROWCOUNT = 0 THEN
                NID := NULL;
        END IF;

        RETURN NID;	
	
	
END CRONTASKRUN;

FUNCTION BULLETIN( VID IN VARCHAR2, VROWSTAMP IN VARCHAR2, VLANGUAGE IN VARCHAR2, VPERIODSTART IN TIMESTAMP, 
	VPERIODEND IN TIMESTAMP, VBULLETINTEXT IN VARCHAR2, VCREATED IN TIMESTAMP, VCREATEDBY IN VARCHAR2)
RETURN VARCHAR2 IS
NID VARCHAR2(10);
BEGIN

        IF VID IS NULL THEN 
                SELECT BULLETINSEQ.NEXTVAL INTO NID FROM DUAL;
        ELSE
                NID := VID;
        END IF;
        
       	MERGE INTO BULLETINS A
        USING (SELECT ID FROM (SELECT ID FROM BULLETINS WHERE ID = NID UNION ALL SELECT NULL ID FROM DUAL) WHERE ROWNUM = 1) B
        ON (A.ID = B.ID)
        WHEN MATCHED THEN        
		UPDATE SET 
		A.ROWSTAMP = VROWSTAMP, A.LANGUAGE = VLANGUAGE, A.PERIODSTART = VPERIODSTART, 
		A.PERIODEND = VPERIODEND, A.BULLETINTEXT = VBULLETINTEXT, A.CREATED = VCREATED, A.CREATEDBY = VCREATEDBY
		WHEN NOT MATCHED THEN
		INSERT (A.ID, A.ROWSTAMP, A.LANGUAGE, A.PERIODSTART, A.PERIODEND, A.BULLETINTEXT, A.CREATED, A.CREATEDBY) VALUES 
			(NID, VROWSTAMP, VLANGUAGE, VPERIODSTART, VPERIODEND, VBULLETINTEXT, VCREATED, VCREATEDBY);
			
        IF SQL%ROWCOUNT = 0 THEN
                NID := NULL;
        END IF;

        RETURN NID;	
	
	
END BULLETIN;

END CORE;
/

show errors;

