CREATE OR REPLACE PACKAGE BODY EMAIL AS

FUNCTION EMAILTEMPLATE (VID IN VARCHAR2, VROWSTAMP IN VARCHAR2, VEMAILNAME IN VARCHAR2, VEMAILSUBJECT IN VARCHAR2, VCONTENT IN VARCHAR2, VHELPTEXT IN VARCHAR2,
	VISACTIVE IN NUMBER, VCREATEDBY IN VARCHAR2, VCREATED IN TIMESTAMP, VMODIFIEDBY IN VARCHAR2, VMODIFIED IN TIMESTAMP) RETURN VARCHAR2 IS
NID VARCHAR2(10);	
BEGIN
	IF VID IS NULL THEN
		SELECT EMAILTEMPLATESEQ.NEXTVAL INTO NID FROM DUAL;
	ELSE 
		NID := VID;
	END IF;
	
	MERGE INTO EMAILTEMPLATES A
	USING (SELECT ID FROM (SELECT ID FROM EMAILTEMPLATES WHERE ID = NID UNION ALL SELECT NULL ID FROM DUAL) WHERE ROWNUM = 1) B
	ON (A.ID = B.ID)
	WHEN MATCHED THEN 
	UPDATE SET A.ROWSTAMP = VROWSTAMP, A.EMAILNAME = VEMAILNAME, A.EMAILSUBJECT = VEMAILSUBJECT,
		A.CONTENT = VCONTENT, A.HELPTEXT = VHELPTEXT, A.ISACTIVE = VISACTIVE, A.CREATEDBY = VCREATEDBY,
		A.CREATED = VCREATED, A.MODIFIEDBY = VMODIFIEDBY, A.MODIFIED = VMODIFIED
	WHEN NOT MATCHED THEN
	INSERT (A.ID, A.ROWSTAMP, A.EMAILNAME, A.EMAILSUBJECT, A.CONTENT, A.HELPTEXT, A.ISACTIVE,
		A.CREATEDBY, A.CREATED, A.MODIFIEDBY, A.MODIFIED) VALUES
		(NID, VROWSTAMP, VEMAILNAME, VEMAILSUBJECT, VCONTENT, VHELPTEXT, VISACTIVE, VCREATEDBY, VCREATED, VMODIFIEDBY, VMODIFIED );

	IF SQL%ROWCOUNT = 0 THEN
		NID := NULL;
	END IF;

	RETURN NID;	
END EMAILTEMPLATE;

/* Used for initial loading of data */
PROCEDURE EMAILTEMPLATE (VEMAILNAME IN VARCHAR2, VEMAILSUBJECT IN VARCHAR2, VCONTENT IN VARCHAR2) IS
NID VARCHAR2(10);
PROJEX4ID VARCHAR2(10);
NOW TIMESTAMP;
BEGIN
	SELECT ID INTO PROJEX4ID FROM USERS WHERE USERLOGIN = 'PROJEX4';
	SELECT SYSDATE INTO NOW FROM DUAL;
	NID := EMAILTEMPLATE(null, 'AAAA',VEMAILNAME, VEMAILSUBJECT, VCONTENT, null, 1, PROJEX4ID, NOW, PROJEX4ID, NOW);
END EMAILTEMPLATE;

FUNCTION EMAILDETAIL ( VID IN VARCHAR2, VROWSTAMP IN VARCHAR2, VUSERID IN VARCHAR2, VEMAILTEMPLATEID IN VARCHAR2,
	VINVITATIONCODE IN VARCHAR2, VEMAILADDRESS IN VARCHAR2, VISSEND IN NUMBER, VSENDDATE IN TIMESTAMP ) RETURN VARCHAR2	 IS
NID VARCHAR2(10);	
BEGIN
	IF VID IS NULL THEN
		SELECT EMAILDETAILSEQ.NEXTVAL INTO NID FROM DUAL;
	ELSE 
		NID := VID;
	END IF;
	
	MERGE INTO EMAILDETAILS A
	USING (SELECT ID FROM (SELECT ID FROM EMAILDETAILS WHERE ID = NID UNION ALL SELECT NULL ID FROM DUAL) WHERE ROWNUM = 1) B
	ON (A.ID = B.ID)
	WHEN MATCHED THEN 
	UPDATE SET A.ROWSTAMP = VROWSTAMP, A.USERID = VUSERID, A.EMAILTEMPLATEID = VEMAILTEMPLATEID, A.INVITATIONCODE = VINVITATIONCODE, 
		A.EMAILADDRESS = VEMAILADDRESS, A.ISSEND = VISSEND, A.SENDDATE = VSENDDATE
	WHEN NOT MATCHED THEN
	INSERT (A.ID, A.ROWSTAMP, A.USERID, A.EMAILTEMPLATEID, A.INVITATIONCODE, A.EMAILADDRESS, A.ISSEND, A.SENDDATE ) VALUES
		(NID, VROWSTAMP, VUSERID, VEMAILTEMPLATEID, VINVITATIONCODE, VEMAILADDRESS, VISSEND, VSENDDATE);

	IF SQL%ROWCOUNT = 0 THEN
		NID := NULL;
	END IF;

	RETURN NID;	
END EMAILDETAIL;

FUNCTION EMAILLOG (VID IN VARCHAR2, VEMAILADDRESS IN VARCHAR2, VSENDDATE IN TIMESTAMP , VSTATUSMESSAGE IN VARCHAR2) RETURN VARCHAR2 IS
NID VARCHAR2(10);	
BEGIN

	IF VID IS NULL THEN
		SELECT EMAILLOGSEQ.NEXTVAL INTO NID FROM DUAL;
	ELSE 
		NID := VID;
	END IF;
	
	MERGE INTO EMAILLOGS A
	USING (SELECT ID FROM (SELECT ID FROM EMAILLOGS WHERE ID = NID UNION ALL SELECT NULL ID FROM DUAL) WHERE ROWNUM = 1) B
	ON (A.ID = B.ID)
	WHEN MATCHED THEN 
	UPDATE SET A.EMAILADDRESS = VEMAILADDRESS, A.SENDDATE = VSENDDATE, A.STATUSMESSAGE = VSTATUSMESSAGE
	WHEN NOT MATCHED THEN
	INSERT (A.ID, A.EMAILADDRESS, A.SENDDATE, A.STATUSMESSAGE ) VALUES
		(NID, VEMAILADDRESS, VSENDDATE, VSTATUSMESSAGE);

	IF SQL%ROWCOUNT = 0 THEN
		NID := NULL;
	END IF;

	RETURN NID;	

END EMAILLOG;

END EMAIL;
/

SHO ERRORS
